<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemSteps</name>
    </assembly>
    <members>
        <member name="M:DBManager.ParamsVirtulization.Add(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="name"> parameter name</param>
            <param name="value">parameter value</param>
            <param name="typeName">use for not standart type</param>
        </member>
        <member name="F:DBManager.ColumnVirtualization.ColumnType.Memo">
            <summary>
            only in access
            </summary>
        </member>
        <member name="M:DBManager.ColumnVirtualization.Add(System.String,DBManager.ColumnVirtualization.ColumnType,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="colType"></param>
            <param name="len"></param>
            <param name="allowNull"></param>
            <param name="primaryKey"></param>
            <param name="identity"></param>
            <param name="compressed">unicode compression of text filed in access</param>
        </member>
        <member name="M:DBManager.CommandVirtualization.Dispose">
            <summary>
            Public implementation of Dispose pattern callable by consumers.
            </summary>
        </member>
        <member name="F:DBManager.CommandVirtualization.addSchema">
            <summary>
            Default value is false.
            Used when setting the adapter schema if needed.
            schema is needed when you need to get additional propertys of the datat table(such as column max length)
            </summary>
        </member>
        <member name="M:DBManager.CommandVirtualization.#ctor">
            <summary>
            Use this constructor when you want:
            1. To add new columns.
            2. To create table.
            </summary>
        </member>
        <member name="M:DBManager.CommandVirtualization.#ctor(System.String,System.Boolean)">
            <summary>
            Use this constructor to set indexes to table.
            </summary>
            <param name="indexName"></param>
        </member>
        <member name="M:DBManager.CommandVirtualization.#ctor(System.String,DBManager.CommandVirtualization.SqlType)">
            <summary>
            Use this contructor inorder to execute connected command
            </summary>
            <param name="sql"></param>
            <param name="sqlType"></param>
        </member>
        <member name="M:DBManager.CommandVirtualization.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Use this contructor inorder to execute disconnected command
            </summary>
            <param name="sqlQuery"></param>
            <param name="sqlInsert"></param>
            <param name="sqlUpdate"></param>
            <param name="sqlDelete"></param>
        </member>
        <member name="M:DBManager.CommandVirtualization.#ctor(System.String)">
            <summary>
            Use this contructor inorder to execute disconnected command which need only the query without insert, delete and update.
            </summary>
            <param name="sqlQuery"></param>
            <param name="sqlInsert"></param>
            <param name="sqlUpdate"></param>
            <param name="sqlDelete"></param>
        </member>
        <member name="F:DBManager.DBVirtualizationBase.m_locker">
            <summary>
            #1656 locking object per datatable to avoid inserting to the database from multiple threads at the same time (causes exception)
            </summary>
        </member>
        <member name="P:DBManager.DBVirtualizationBase.MAX_STRING_LEN">
            <summary>
            Return the MAX length of the field of type string.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ParseColType2string(DBManager.ColumnVirtualization.ColumnItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.AddColumn2DataTable(System.Data.DataTable,System.Type,System.String)">
            <summary>
            Add new column to data table only if it does not exist
            Return true if new column was added to the data table, otherwise false.
            </summary>
            <param name="dt"></param>
            <param name="t">Example typeof(int)</param>
            <param name="colName"></param>
            <remarks>
            #1347
            </remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.HandleAutoIncreamentCol(System.String@,System.String@)">
            <summary>
            Each database enjine hanldes the auto increament field in different way.
            For example in access,the type of the field is AUTOINCREMENT and without the identity key word.
            in sql server , the type of the field is as requested(int,bigInt),and with the identity key word.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ProduceNewColumnQuery(DBManager.ColumnVirtualization.ColumnItem)">
            <summary>
            Produce a valid sql string according to the column properties.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.AddColoumnToTable(System.String,DBManager.CommandVirtualization)">
            <summary>
            Add columns to a table.
            return the number of columns added.
            </summary>
            <param name="tableName"></param>
            <param name="commandColumns"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.AlterColoumn(System.String,DBManager.CommandVirtualization)">
            <summary>
            Alter(type\size..)existing columns from a specific table.
            Note:In case of type text,the function does not alter the Allow sero length property.
            return the number of columns altered.
            </summary>
            <remarks>
            issue 8046
            </remarks>
            <param name="tableName"></param>
            <param name="commandColumns"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DBManager.DBVirtualizationBase.CreateTable(System.String,DBManager.CommandVirtualization)" -->
        <member name="M:DBManager.DBVirtualizationBase.DeleteIndex(System.String,System.String)">
            <summary>
            Remove an index from a table.
            Syntax : DROP INDEX index_name ON table_name
            </summary>
            <param name="tableName"></param>
            <param name="indexName"></param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.IsTableAlreadyExist(System.String,System.Collections.Generic.Dictionary{System.String,System.Byte})">
            <summary>
            check if the table already exist in the data set
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CloneDataTableIncludeData(System.Data.DataTable)">
            <summary>
            Create new table and populate it the dtSource data.
            </summary>
            <param name="dtSource"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CloneDataTableIncludeDataStat(System.Data.DataTable)">
            <summary>
            Create new table and populate it the dtSource data.
            </summary>
            <param name="dtSource"></param>
            <returns></returns>
            <remarks>
            The function 'CloneDataTableIncludeData' is the same except this is static.
            </remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ColumnExists(System.Data.DataTable,System.String)">
            <summary>
            chek if a column exist in a data table.
            if exist return true.
            </summary>
            <param name="Table"></param>
            <param name="ColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.GetTableColoumns(System.String)">
            <summary>
            get all the columns of the specified table
            the data table contains 0 rows.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.HandleSpecialParameter(System.String,System.String,System.Object,System.Data.Common.DbCommand@)">
            <summary>
            Better performance when using StringBuilder - O(n) instead of (n^2) with string
            </summary>
            <param name="typeName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbCommand"></param>
            <remarks>#26295</remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.SetConnection(System.String)">
            <summary>
            initiaize the conn prtotected variable
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.SetParametersForUpdate(System.Data.Common.DbCommand@,System.Data.DataTable,DBManager.DBVirtualizationBase.QueryType)">
            <summary>
            Set parameters for connectionless mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.SetTransactionType">
            <summary>
            Set transaction type oleDB,Sql...
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ClearTableFromDataSet(System.Data.DataTable@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="gcCollect">Indicates if GC collect should be executed after removing it from the DataSet</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ClearTableFromDataSet(System.String,System.Boolean)">
            <summary>
            Remove the data table from the DataSet and clear the resource.
            </summary>
            <param name="tblName">Table name to remove</param>
            <param name="gcCollect">Indicates if GC collect should be executed after removing it from the DataSet</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ReleaseDataTableList(System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            
            </summary>
            <param name="dtList"></param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ReleaseDataTable(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ClearAllTablesFromDataSet(System.Boolean)">
            <summary>
            Clear all the data tables from the data set and clear the resource.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CloneDataRow(System.Data.DataRow)">
            <summary>
            Clone data rows schema and data.
            </summary>
            <param name="drSrc"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CopyDataRows(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copy two data rows which have same structure
            </summary>
            <param name="src">source data row</param>
            <param name="dst">destination data row</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CopyDataRowsQuick(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copy two data rows which have same structure
            </summary>
            <param name="src">source data row</param>
            <param name="dst">destination data row</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CopyDataRowsStat(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copy two data rows which have same structure
            </summary>
            <param name="src">source data row</param>
            <param name="dst">destination data row</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CopyDataRowsQuickStat(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copy two data rows which have same structure
            </summary>
            <param name="src">source data row</param>
            <param name="dst">destination data row</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.MergeDataTables(System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            
            </summary>
            <param name="dataTableList"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.MergeDataTables(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Add data row of dtNew to the end of the dtOriginal data table.
            </summary>
            <param name="dtOriginal">Data table which data rows should be added to.</param>
            <param name="dtNew">Data table which its data rows should be added from</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CopyDataRowsByName(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Scan the destination data row and for each column copy the column's value from the 
            destination data row
            </summary>
            <param name="src">source data row</param>
            <param name="dst">destination data row</param>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.GetServerCurrentTime">
            <summary>
            Get the current time from the server
            </summary>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.GetTableStructure(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:DBManager.DBVirtualizationBase.UseStoredProcedures">
            <summary>
            Indicates if we should use stroed procedure during execution.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.Execute(DBManager.CommandVirtualization,System.String)">
            <summary>
            Use this function for disconnected commands. The result will be stored as a table in the data set
            </summary>
            <param name="command"></param>
            <param name="tblName">name of the table, which will store the result in the dataSet </param>
            <returns> The number of records the new table has.</returns>
            <remarks>
            #1656 Add Locking mechanism for multi threading
            </remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.ExecuteAutoDtName(DBManager.CommandVirtualization,System.String@)">
            <summary>
            Use this function in case you want the system to create automatic name for the new data table.
            tblName will store the new name of the data table which was created in the Data Set.
            </summary>
            <param name="command"></param>
            <param name="tblName"></param>
            <returns></returns>
            <remarks>
            Issue #1185
            </remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.GetColumnSize(System.String,System.String)">
            <summary>
            Get size of coumns as defined in the database. Use this function for text columns.
            </summary>
            <param name="tableName"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.GetSchema(System.String,System.String)">
            <summary>
            Get table schema. In case you want to get specific column name schema then set the 'colName' parameter with column name,
            otherwise set this paramete with null.  
            </summary>
            <param name="tableName"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.EndTransaction">
            <summary>
            Ending transaction after commit 
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.CommitTransaction">
            <summary>
            commit transaction to the database
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.RollBackTransaction">
            <summary>
            Rollback last transaction execution
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationBase.Update(System.String)">
            <summary>
            Update specific table in the data set.
            all fields must be wrriten in the sql statment for insert and update.
            the order of the wrriten fields is according to order they were selected by the select statment.
            i.e ,select * : the order is according to the fields order in the table.
            
            Notes:
            1. You must not use NOW() in the queries, you should set the DateTime fields directly in the data table.
               If you use NOW() concurreny exception is thrown.
            2. an integer field in the db is refered to int16.
               if you pass as a parameter integer(the default is int32) you will get overflow error.
            </summary>
            <param name="tblName"></param>
            <returns></returns>
        </member>
        <member name="M:DBManager.DBVirtualizationOleDB.ClearPool">
            <summary>
            When we close the connection and the application is still open the the MDB file is closed only after ~60 seconds (becuase the connection is still in the pool).
            If you want  to force the immediate close then call to this function after calling the 'Close' and 'Dispose' functions.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationOleDB.AddParameter(System.String,System.String,System.Object,System.Data.Common.DbCommand,System.Data.Common.DbParameter)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbCommand"></param>
            <param name="dbParameter"></param>
            <remarks>
            Adding ArrayIds parameter which is array of unsigned integer that should be insert into sql query
            used for into statement
            </remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationOleDB.SetParametersForUpdate(System.Data.Common.DbCommand@,System.Data.DataTable,DBManager.DBVirtualizationBase.QueryType)">
            <summary>
            set parameters for connectionless mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DBManager.DBVirtualizationOleDB.HandleAutoIncreamentCol(System.String@,System.String@)">
            <summary>
            Each database enjine hanldes the auto increament field in different way.
            For example in access,the type of the field is AUTOINCREMENT and without the identity key word.
            in sql server , the type of the field is as requested(int,bigInt),and with the identity key word.
            </summary>
        </member>
        <member name="M:DBManager.DBVirtualizationOleDB.GetParameterType(System.String)">
            <summary>
            gets type name (string) and returns the
            OleDBType referse to hte given type.
            </summary>
            <param name="paramName"></param>
            <returns></returns>
            <remarks>
            Efi issue #8063 - We parse "DateTime" to  OleDbType.Date instead of  OleDbType.DbDate
                              becuase we are using this function only whe updating table in disconnected mode.
                              In this mode we want to date to be in long format which contain date+time.
            </remarks>
        </member>
        <member name="T:DBManager.Locker">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DBManager.DBVirtualizationUtilities.SyncDGV2DataTable(System.Data.DataTable,System.Windows.Forms.DataGridView,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})" -->
        <member name="M:Ini.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:Ini.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            Return true if succeded.
            </summary>
            <PARAM name="Section"></PARAM>
            Section name
            <PARAM name="Key"></PARAM>
            Key Name
            <PARAM name="Value"></PARAM>
            Value Name
        </member>
        <member name="M:Ini.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="Section"></PARAM>
            <PARAM name="Key"></PARAM>
            <PARAM name="Path"></PARAM>
            <returns></returns>
        </member>
        <member name="T:OrionTools.ScreenCapture">
            <summary>
            Provides functions to capture the entire screen, or a particular window, and save it to a file.
            </summary>
        </member>
        <member name="M:OrionTools.ScreenCapture.CaptureScreen">
            <summary>
            Creates an Image object containing a screen shot of the entire desktop
            </summary>
            <returns></returns>
        </member>
        <member name="M:OrionTools.ScreenCapture.CaptureWindow(System.IntPtr)">
            <summary>
            Creates an Image object containing a screen shot of a specific window
            </summary>
            <param name="handle">The handle to the window. (In windows forms, this is obtained by the Handle property)</param>
            <returns></returns>
        </member>
        <member name="M:OrionTools.ScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of a specific window, and saves it to a file
            </summary>
            <param name="handle"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:OrionTools.ScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of the entire desktop, and saves it to a file
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="T:OrionTools.ScreenCapture.GDI32">
            <summary>
            Helper class containing Gdi32 API functions
            </summary>
        </member>
        <member name="T:OrionTools.ScreenCapture.User32">
            <summary>
            Helper class containing User32 API functions
            </summary>
        </member>
        <member name="T:TestExecutive.Enums">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.Enums.GetEnumName(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name = "t" ></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            #1581
            </remarks>
        </member>
        <member name="M:TestExecutive.Enums.GetEnumFromName(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <returns></returns>
            <remarks>#1581</remarks>
        </member>
        <member name="T:TestExecutive.Enums.WorkingModes">
            <summary>
            Indicates if the OTM launched in remote or local
            </summary>
        </member>
        <member name="T:TestExecutive.Enums.InternalVarTypes">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #449555221 - Add "StationGlobal"
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.LoadVaraiblesTypes">
            <summary>
            
            </summary>
            <remarks>
            #598372051
            Arguments out are not relevant threfore are not listed in the enum.
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.NumericCriteriaTypes">
            <summary>
            
            </summary>
            <remarks>
            490232700
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ExecutionModes">
            <summary>
            
            </summary>
            <remarks>#1526</remarks>
        </member>
        <member name="T:TestExecutive.Enums.UUTTestTypes">
            <summary>
            
            </summary>
            <remarks>
            Issue #1458
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.PostPrintActions">
            <summary>
            
            </summary>
            <remarks>
            #700839069 
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ExecutionButtonModes">
            <summary>
            The Start Button's Modes In FrmMain
            </summary>
            <remarks>540456576</remarks>
        </member>
        <member name="T:TestExecutive.Enums.TesDataType">
            <summary>
            
            </summary>
            <remarks>
            #1391
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.StepPhase">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1300
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ResultQuality">
            <summary>
            
            </summary>
            <remarks>
            #1446
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.RunMultipleMethodList">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1301
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.TestOnFailureActionList">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1262
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.VarTypes">
            <summary>
            Values are reflected from table VarTypes in db.
            Numeric=1
            String=2
            </summary>
            <remarks>
            Maor issue #513367262 - Add 'External'
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ThermalProfileWorkingMode">
            <summary>
            
            </summary>
            <remarks>
            #1526
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.TestStatus">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #601987095 - Add "DoneWithError" status
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.StepFailureActions">
            <summary>
            Indicates what the OTM should do in case the step result is error or failed (not in criteria).
            </summary>
            <remarks>
            #1643 - Add ManualFailureAction
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.StepMeasurementArchiveType">
            <summary>
            0 - Save and show in the report; 1 - Do not save; 2 -Save but do not show at the report
            </summary>
        </member>
        <member name="T:TestExecutive.Enums.FamilyType">
            <summary>
            #1589
            Inorder to know the type at report time.
            </summary>
        </member>
        <member name="T:TestExecutive.Enums.MoveDirections">
            <summary>
            
            </summary>
            <remarks>
            #1623, #1624
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ThreadingMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:TestExecutive.Enums.ExpandState.Expand">
            <summary>
            '+'
            </summary>
        </member>
        <member name="F:TestExecutive.Enums.ExpandState.Collapse">
            <summary>
            '-'
            </summary>
        </member>
        <member name="T:TestExecutive.Enums.ExcludeMechanismModes">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #426780031
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.ArgumentDirection">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #432130079 - Create enum
            </remarks>
        </member>
        <member name="T:TestExecutive.Enums.UUTTypes">
            <summary>
            
            </summary>
            <remarks>
            #693288232
            </remarks>
        </member>
        <member name="T:TestExecutive.ArgumentsMode">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #432130079 - Create enum
            </remarks>
        </member>
        <member name="T:TestExecutive.ReferenceType">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #498699058 - Create enum
            </remarks>
        </member>
        <member name="T:TestExecutive.FrmOTMMessage">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #449529681
            </remarks>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.ItIsNumericMessage">
            <summary>
            Indicates if the message should let the user to insert numericValue
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.ItIsStringMessage">
            <summary>
            Indicates if the message should let the user to insert string value
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.NumericMessageMin">
            <summary>
            Used in case of numeric message.
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.NumericDecimalPlaces">
            <summary>
            Used in case of numeric message.
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.NumericMessageMax">
            <summary>
            Used in case of numeric message
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.NumericValue">
            <summary>
             Used in case of numeric message
            </summary>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.StringValue">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1277.
            </remarks>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.TopMostMessage">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1254.
            </remarks>
        </member>
        <member name="P:TestExecutive.FrmOTMMessage.PressedButton">
            <summary>
            Stores the returned 
            </summary>
        </member>
        <member name="M:TestExecutive.FrmOTMMessage.#ctor(System.String,System.String,System.String,System.Drawing.Font,System.Drawing.Font,System.UInt32,System.UInt32,System.String,System.UInt32,System.Drawing.Font,System.String,System.UInt32,System.Drawing.Font,System.String,System.UInt32,System.Drawing.Font,System.String,System.UInt32,System.Drawing.Font,System.String,System.UInt32,System.Drawing.Font,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="formCaption"></param>
            <param name="messageCaption"></param>
            <param name="messageBody"></param>
            <param name="messageCaptionFont"></param>
            <param name="messageFont"></param>
            <param name="messageCaptionForeColor"></param>
            <param name="messageForeColor"></param>
            <param name="button1Caption"></param>
            <param name="button1Color"></param>
            <param name="button1Font"></param>
            <param name="button2Caption"></param>
            <param name="button2Color"></param>
            <param name="button2Font"></param>
            <param name="button3Caption"></param>
            <param name="button3Color"></param>
            <param name="button3Font"></param>
            <param name="button4Caption"></param>
            <param name="button4Color"></param>
            <param name="button4Font"></param>
            <param name="button5Caption"></param>
            <param name="button5Color"></param>
            <param name="button5Font"></param>
            <param name="beepIntervalMsec"></param>
            <param name="beepNumberOfRepetitions"></param>
            <param name="imagePath"></param>
            <param name="imageSizeWidth"></param>
            <param name="imageSizeHeight"></param>
            <remarks>
            Ronen issue#1314 - Add the string imagePath="",int imageSizeWidth=250,int imageSizeHeight=200
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmOTMMessage.FrmOTMMessage_Load(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>Issue #1330</remarks>
        </member>
        <member name="M:TestExecutive.FrmOTMMessage.SetTextMessage(System.String,System.String,System.String)">
            <summary>
            SetTextMessage - send null to unchange text
            </summary>
            <param name="formCaption"></param>
            <param name="messageCaption"></param>
            <param name="messageBody"></param>
            <remarks>
            Maor issue #449529681 - Create method
            </remarks>
        </member>
        <member name="F:TestExecutive.FrmOTMMessage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmOTMMessage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmOTMMessage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.NumericValue">
            <summary>
             Used in case of numeric message
            </summary>
        </member>
        <member name="P:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.TopMostMessage">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1254.
            </remarks>
        </member>
        <member name="P:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.PressedButton">
            <summary>
            Stores the returned 
            </summary>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.#ctor(System.String,System.String,System.String,System.Drawing.Font,System.Drawing.Font,System.UInt32,System.UInt32,System.String,System.UInt32,System.Drawing.Font,System.String,System.UInt32,System.Drawing.Font,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="formCaption"></param>
            <param name="messageCaption"></param>
            <param name="messageBody"></param>
            <param name="messageCaptionFont"></param>
            <param name="messageFont"></param>
            <param name="messageCaptionForeColor"></param>
            <param name="messageForeColor"></param>
            <param name="button1Caption"></param>
            <param name="button1Color"></param>
            <param name="button1Font"></param>
            <param name="button2Caption"></param>
            <param name="button2Color"></param>
            <param name="button2Font"></param>
            <param name="button3Caption"></param>
            <param name="button3Color"></param>
            <param name="button3Font"></param>
            <param name="button4Caption"></param>
            <param name="button4Color"></param>
            <param name="button4Font"></param>
            <param name="button5Caption"></param>
            <param name="button5Color"></param>
            <param name="button5Font"></param>
            <param name="beepIntervalMsec"></param>
            <param name="beepNumberOfRepetitions"></param>
            <param name="imagePath"></param>
            <param name="imageSizeWidth"></param>
            <param name="imageSizeHeight"></param>
            <remarks>
            Ronen issue#1314 - Add the string imagePath="",int imageSizeWidth=250,int imageSizeHeight=200
            </remarks>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.FrmOTMMessage_Load(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>Issue #1330</remarks>
        </member>
        <member name="F:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.MAX_NUMERIC">
            <summary>
            Arrays:
            Captions
            Units
            Decimal places
            
            12 double values (value1-value12)
            </summary>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.InitGUI">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #489484710 - set new location to unit panels according to caption width.
            </remarks>
        </member>
        <member name="P:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.Values">
            <summary>
            Return the values insert to the numeric controls
            </summary>
        </member>
        <member name="F:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.GUI.MessagesForms.FrmOTMMessageNumerics.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TestExecutive.Paths.CustomApplicationDataFolder">
            <summary>
            
            </summary>
            <remarks>
            641196918
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.SequenceLogoFilePath(System.String,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="uutName"></param>
            <param name="dbPath"></param>
            <returns></returns>
            <remarks>
            #1552
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.SequenceLogoFolderPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uutName"></param>
            <param name="dbPath"></param>
            <returns></returns>
            <remarks>
            #1552
            </remarks>
        </member>
        <member name="P:TestExecutive.Paths.AppLocalDataPathWithCustom">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            #641196918 - Custom application data folder mechanism. (can be configured via the settings form).
            </remarks>
        </member>
        <member name="P:TestExecutive.Paths.AppLocalDataPath">
            <summary>
            Uses the ApplicationData folder path of all the users.
            Example:C:\Documents and Settings\All Users\Application Data
            </summary>
        </member>
        <member name="P:TestExecutive.Paths.DBTemplateFolder">
            <summary>
            Return the folder path where templates UUT databases are stored.
            </summary>
            <remarks>
            Issue #1452 - store template database in program data instead of program files
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetDBFolderPath(System.String,System.String,System.String)">
            <summary>
             Return folder path which is based on the 'path' location of the database (ProgramData\...)
            </summary>
            <param name="path"></param>
            <param name="dbFileName"></param>
            <param name="subFolder"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetOTM_DBPath">
            <summary>
            Return the full path of the OTM.mdb file
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetUUT_TestsDBPath(System.String,System.String)">
            <summary>
            Return the path of the UUT tests database.
            </summary>
            <param name="uutName"></param>
            <param name="dbPath">If dbPath is null then we use default path 'ApplicationData\Orion\OTM'</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetUUT_DBPath(System.String)">
            <summary>
            Return the path of the UUT database folder.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #2010.
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTLogoPath(System.String)">
            <summary>
            Return the path where the UUT logo is stored (include the file name).
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #2010
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTReportArchiveDBFolderPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uutName"></param>
            <param name="dbPath"></param>
            <returns></returns>
            <remarks>
            #1435
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUT_ReportsDBLockerPath(System.String)">
            <summary>
            Get file locker of the execution file.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetUUT_ReportsDBPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uutName"></param>
            <param name="dbPath">Used when we restore database</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetDB_FolderPath(System.String,System.String)">
            <summary>
            Return path which is based on the default location of the database (ProgramData\...)
            </summary>
            <param name="dbFileName"></param>
            <param name="subFolder"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetTempUniqueFilePath">
            <summary>
            Returns file path of unique file in the OTM temporary folder.  
            </summary>
            <returns></returns>
            <remarks>
            #438940413
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUniqueFileName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTTestExecutionsPicturesPath(System.String,System.UInt32)">
            <summary>
            Return the folder path where UUT execution pictures of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1239
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTExecutionsPicturesFolderPath(System.String,System.String)">
            <summary>
            Return the folder path where UUT execution pictures of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1239
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.ResourcesFolderPath(System.String)">
            <summary>
            
            </summary>
            <param name="resourceParentFolderPath">In case we want to use custom parent folder (for example when we ar we restoring).</param>
            <returns></returns>
            <remarks>
            Ronen issue #1304
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTTestExecutionsCSVsPath(System.String,System.UInt32)">
            <summary>
            Return the folder path where UUT execution CSVs of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1239
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTExecutionsCSVsFolderPath(System.String,System.String)">
            <summary>
            Return the folder path where UUT execution CSVs of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <param name="csvFolderPath"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1239
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTExecutionsTextFilesFolderPath(System.String,System.String)">
            <summary>
            Return the folder path where UUT execution text files of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1409
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTTestExecutionsTextFilesPath(System.String,System.UInt32)">
            <summary>
            Return the folder path where UUT execution text files of specific tests are stored.
            </summary>
            <param name="uutName"></param>
            <returns></returns>
            <remarks>
            Ronen issue #1409
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetGraphics_FolderPath(System.String)">
            <summary>
            We store in this folder the all the logos 
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1203
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetProjectsGraphicFolderPath(System.String)">
            <summary>
            Return the project's graphics. 
            </summary>
            <param name="projectName"></param>
            <returns></returns>
            <remarks>
            #1468
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetProjectLogoPath(System.String)">
            <summary>
            Returns the project logo file path. 
            Note - Currenty we support only 1 project.
            </summary>
            <returns></returns>
            <remarks>
            #1468
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetBackgroundsImagesFolder(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>#1561</remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetOpenFormBackgroundImagePath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            #1561
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetLoginBackgroundImagePath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            #1561
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetINI_FolderPath(System.String)">
            <summary>
            Note - INI folder is always stored in ProgramData folder e.g. its path cannot be configured. 
            </summary>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            #1440
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.DllFilePath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            #1440
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.ReportLogFilePath(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1203
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbFileName"></param>
            <param name="subFolder">Use this parameter in cae you want to add sub folder to the path appears in the connection string, otherwise use null</param>
            <param name="password"></param>
            <returns></returns>
            <remarks>
            Ronen issue change OLE DB Services=-1 to OLE DB Services=4
            #1425 change OLE DB Services=-1 to OLE DB Services=-5
            #1723 add 64 bit version
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.Is64BitProcess">
            <summary>
            //#1723
            </summary>
            <returns></returns>
        </member>
        <member name="P:TestExecutive.Paths.DLLS_FOLDER_PATH">
            <summary>
            Return the folder which all the tester dll are stored.
            </summary>
        </member>
        <member name="P:TestExecutive.Paths.ReportPath">
            #1407
        </member>
        <member name="M:TestExecutive.Paths.GetUUT_CrieriaVariablesFilePath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uutName"></param>
            <param name="dbPath"></param>
            <returns></returns>
            <remarks>
            #1548
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetUUTAssemblyFolderPath(System.String,System.String)">
            <summary>
            Returns the path where the Assemblies of the UUT is stored inorder to load compiled steps instead of recompiling #1510
            </summary>
            <param name="uutName"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Paths.ProduceDateTimePath(System.DateTime)">
            <summary>
            Produce file path based on dt
            </summary>
            <param name="dt"></param>
            <returns></returns>
            <remarks>
            #1444
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.ProduceNewReprtPath(System.UInt32,System.String,System.String,TestExecutive.Enums.ReportTypes,System.DateTime,System.Boolean)">
            <summary>
            
            </summary>
            <param name="uutManger"></param>
            <returns></returns>
            <remarks>
            Issue #1319 - Add uut properties to the report name
            594460944 - Failures report
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.GetDllFullPath(System.String)">
            <summary>
            Return full path of driver dll.
            </summary>
            <param name="relativePath"></param>
            <returns></returns>
            <remarks>
            541232315 - Linked DLL
            </remarks>
        </member>
        <member name="P:TestExecutive.Paths.AssembliesInfoFilePath">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            #1323
            #415447296
            </remarks>
        </member>
        <member name="M:TestExecutive.Paths.ExternalApplicationsPath">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1174
            </remarks>
        </member>
        <member name="P:TestExecutive.Paths.PluginFolderPath">
            <summary>
            The plugin folder path.
            </summary>
        </member>
        <member name="P:TestExecutive.Paths.UUTS_FOLDER_PATH">
            <summary>
            Issue - #415447296
            </summary>
        </member>
        <member name="M:TestExecutive.Utilities.ProduceUniqueNumberGuid(System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="addMsec"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
            <remarks>
             #597676371
            </remarks>
        </member>
        <member name="M:TestExecutive.Utilities.ProduceUniqueNumber(System.Boolean,System.String,System.String)">
            <summary>
            Produce unique number based on the current datetime. - thread safe
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Utilities.ProduceTimeFileName(System.Boolean,System.String,System.String)">
            <summary>
            Produce file name based on the current time in the following format:YY_MM_DD_HH_MM_SS.
            </summary>
            <param name="prefix">Prefix the concatenate to the file name.</param>
            <param name="surffix">Surffix the concatenate to the file name.</param>
            <param name="addMsec"></param>
            <returns></returns>
        </member>
        <member name="T:TestExecutive.API">
            <summary>
            All the remote control functions
            </summary>
        </member>
        <member name="M:TestExecutive.API.SendBroadcastMessage(System.String,System.Object)">
            <summary>
            Broadcasts a message to all the OTM's clients.
            Works only in remote mode.
            </summary>
            <param name="messageId">The id of the message</param>
            <param name="data">The item attached to the message</param>
        </member>
        <member name="T:TestExecutive.Arrays">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Byte[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.SByte[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Int16[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.UInt16[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Int32[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.UInt32[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Int64[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.UInt64[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Single[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.Double[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Init(System.String[]@)">
            <summary>
            Initilaize array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Byte[],System.Byte[]@)">
            <summary>
            Sort the inputs array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.SByte[],System.SByte[]@)">
            <summary>
            Sort the inputs sbyte array
            </summary>
            <param name="array"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Int16[],System.Int16[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.UInt16[],System.UInt16[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Int32[],System.Int32[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.UInt32[],System.UInt32[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Int64[],System.Int64[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.UInt64[],System.UInt64[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Single[],System.Single[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.Double[],System.Double[]@)">
            <summary>
            Sort the inputs array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort(System.String[],System.String[]@)">
            <summary>
            Sort the inputs double array
            </summary>
            <param name="array">The one-dimensional, zero-based array to sort.</param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Sort``1(``0[],``0[]@)">
            <summary>
            Sort the input array
            </summary>
            <param name="array"></param>
            <param name="arrayOut">Sorted array</param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Byte[],System.Byte,System.Byte[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.SByte[],System.SByte,System.SByte[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Int16[],System.Int16,System.Int16[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.UInt16[],System.UInt16,System.UInt16[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Int32[],System.Int32,System.Int32[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.UInt32[],System.UInt32,System.UInt32[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Int64[],System.Int64,System.Int64[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.UInt64[],System.UInt64,System.UInt64[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Single[],System.Single,System.Single[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.Double[],System.Double,System.Double[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Add(System.String[],System.String,System.String[]@)">
            <summary>
            Add new item to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.SByte[],System.SByte[],System.SByte[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Int16[],System.Int16[],System.Int16[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.UInt16[],System.UInt16[],System.UInt16[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Int32[],System.Int32[],System.Int32[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.UInt32[],System.UInt32[],System.UInt32[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Int64[],System.Int64[],System.Int64[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.UInt64[],System.UInt64[],System.UInt64[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Single[],System.Single[],System.Single[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.AddRange(System.String[],System.String[],System.String[]@)">
            <summary>
            Add new items to the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="newValues"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Byte[],System.Int32,System.Byte@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.SByte[],System.SByte,System.SByte@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Int16[],System.Int32,System.Int16@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.UInt16[],System.Int32,System.UInt16@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Int32[],System.Int32,System.Int32@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.UInt32[],System.Int32,System.UInt32@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Int64[],System.Int32,System.Int64@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.UInt64[],System.Int32,System.UInt64@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Single[],System.Int32,System.Single@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.Double[],System.Int32,System.Double@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetValue(System.String[],System.Int32,System.String@)">
            <summary>
            Gets value from the array
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.GetGeneric``1(``0[],System.Int32,``0@)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Byte[],System.Int32,System.Byte,System.Byte[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.SByte[],System.Int32,System.SByte,System.SByte[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Int16[],System.Int32,System.Int16,System.Int16[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.UInt16[],System.Int32,System.UInt16,System.UInt16[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Int32[],System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.UInt32[],System.Int32,System.UInt32,System.UInt32[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Int64[],System.Int32,System.Int64,System.Int64[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.UInt64[],System.Int32,System.UInt64,System.UInt64[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="newValue"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Single[],System.Int32,System.Single,System.Single[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.Double[],System.Int32,System.Double,System.Double[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.SetValue(System.String[],System.Int32,System.String,System.String[]@)">
            <summary>
            Sets value in the array.
            </summary>
            <param name="arrayIn"></param>
            <param name="index"></param>
            <param name="value"></param>
            <param name="arrayOut"></param>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Byte[],System.Byte@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.SByte[],System.SByte@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Int16[],System.Int16@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.UInt16[],System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Int32[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.UInt32[],System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Single[],System.Single@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Double[],System.Double@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the array size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.UInt64[],System.UInt64@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the array size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max(System.Int64[],System.Int64@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the array size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Max``1(``0[],``0@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the array size</param>
            <param name="max"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Byte[],System.Byte@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.UInt64[],System.UInt64@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Int64[],System.Int64@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.SByte[],System.SByte@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Int16[],System.Int16@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.UInt16[],System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Int32[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.UInt32[],System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Single[],System.Single@,System.Int32,System.Int32)">
            <summary>
            Returns the maximum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the arrya size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Min(System.Double[],System.Double@,System.Int32,System.Int32)">
            <summary>
            Returns the minimum value in a sequence of values.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="lastIndex">In case of -1 last index is the array size</param>
            <param name="min"></param>
            <remarks>
            #620944037
            </remarks>
        </member>
        <member name="M:TestExecutive.Arrays.Average(System.Object,System.Double@)">
            <summary>
            Returns the average value in a sequence
            </summary>
            <param name="array">Input array</param>
            <param name="average">The average value in a sequence</param>
            <remarks>620944037</remarks>
        </member>
        <member name="M:TestExecutive.Arrays.GetArrayLength(System.Object,System.Int32@)">
            <summary>
            Return the total number of elements in the array.
            </summary>
            <param name="array"></param>
            <param name="length">The total number of elements in the array.</param>
        </member>
        <member name="M:TestExecutive.Arrays.CompareArrays(System.Object,System.Object,System.Int32@)">
            <summary>
            Compare 2 (one dimentional) arrays and returns an integer that indicates if the arrays are equal.
            </summary>
            <param name="buffer1">The first buffer</param>
            <param name="buffer2">The second buffer</param>
            <param name="result">0- Arrays are equal; 1- Arrays are not equal</param>
            <remarks>
            Issue #1384
            </remarks>
        </member>
        <member name="T:TestExecutive.DirectoryManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.DirectoryManager.DisplayDirectory(System.String)">
            <summary>
            Opens directory using the windows explorer.
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:TestExecutive.DirectoryManager.GetFolders(System.String,System.String[]@,System.Byte,System.String)">
            <summary>
             Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="folders">A String array containing the names of files in the specified directory that match the specified search pattern</param>
            <param name="topDirectoryOnly">Operation should include all subdirectories or only the current directory    </param>
            <param name="searchPattern">The search string to match against the names of files in path</param>
        </member>
        <member name="M:TestExecutive.DirectoryManager.DirectoryBrowser(System.String,System.String,System.String@,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Display directory browser.
            </summary>
            <param name="path"></param>
            <param name="messag"></param>
            <param name="selectedFolder"></param>
            <param name="showSubDirectories"></param>
            <param name="topMost"></param>
            <param name="rootDirectorySelectionEnabled"></param>
            <param name="returnFullPath">Indicates if full or relative selected path returned</param>
            <remarks>
            #641025507
            </remarks>
        </member>
        <member name="F:TestExecutive.DirectoryManager.m_syncContext">
            <summary>
            Stores the OTM GUI SynchronizationContext
            </summary>
        </member>
        <member name="M:TestExecutive.DirectoryManager.SetSyncronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            The OTM calls to this function in case it exists.
            The m_syncContext lets the user to show non modal form (using the GUI thread). 
            </summary>
            <param name="syncContext"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:TestExecutive.DirectoryManager.WindowsDirectoryBrowser(System.String@,System.String,System.String)">
            <summary>
            Prompts the user to select a folder.
            </summary>
            <param name="selectedPath">The path selected by the user</param>
            <param name="defaultPath">Path to set as default</param>
            <param name="caption">sets the descriptive text displayed above the tree view control in the dialog box</param>
            <remarks>
            #641129279
            </remarks>
        </member>
        <member name="M:TestExecutive.DirectoryManager.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.DirectoryManager.DeleteFiles(System.String)">
            <summary>
            Delete all files in the specified folder.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:TestExecutive.DirectoryManager.DeleteDirectory(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.DirectoryManager.DirectoryExist(System.String,System.Byte@)">
            <summary>
             Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="directoryPath">The path to test</param>
            <param name="directoryExist">1- if path refers to an existing directory, otherwise 0</param>
        </member>
        <member name="M:TestExecutive.DirectoryManager.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies an existing directory to a new directory.
            </summary>
            <param name="sourceDirName">The path of the directory to copy</param>
            <param name="destDirName">The path to the new location for sourceDirName</param>
            <param name="copySubDirs">Determines whether to also copy the subdirectories</param>
            <param name="overwrite">True if the destination files can be overwritten, otherwise false</param>
        </member>
        <member name="M:TestExecutive.DirectoryManager.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for sourceDirName. If sourceDirName is a file,then destDirName must also be a file name.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FrmFolderBrowser.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="path"></param>
            <param name="topMost"></param>
            <param name="showSubDirectories"></param>
            <param name="rootDirectorySelectionEnabled"></param>
            <param name="returnFullPath"></param>
            <remarks>
            #641025507
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmFolderBrowser.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            #641025507
            </remarks>
        </member>
        <member name="F:TestExecutive.FrmFolderBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmFolderBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmFolderBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestExecutive.FileManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.FileManager.OpenFileDialog(System.String,System.String@,System.String,System.String)">
            <summary>
            Prompts the user to open a file.
            </summary>
            <param name="filter">The filter string used for the dailog. Example for txt files filter use Text file (*.txt)|*.txt</param>
            <param name="filePath">File of the file to open</param>
            <param name="initialDirectory">The initial directory for the form</param>
            <param name="title">The title of the dialog</param>
            <remarks>
            Issue #1413
            </remarks>
        </member>
        <member name="M:TestExecutive.FileManager.CompareFiles(System.String,System.String,System.Byte@,System.Int32@,System.Int32)">
            <summary>
            Compare two file.
            </summary>
            <param name="file1Path">Path of first file.</param>
            <param name="file2Path">Path of second file.</param>
            <param name="diffThreshold">Threshold used for the comparison between every 2 bytes in the files</param>
            <param name="result">0- In case to two files are identical, otherwise 1</param>
            <param name="numOffDiff">Number of different bytes in the entire files</param>
            <remarks>
            #401113520 -Add new parameter indicates number of difference between the 2 files
            </remarks>
        </member>
        <member name="M:TestExecutive.FileManager.WriteDelimitedTextFile(System.String,System.String,System.String[])">
            <summary>
            Produce delimited text file
            </summary>
            <param name="filePath">The file to create.</param>
            <param name="delimiter">The delimiter to use.</param>
            <param name="columnValues">The columns to write.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.DisplayFile(System.String)">
            <summary>
            Opens file with the default application (defined for this file in the OS).
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:TestExecutive.FileManager.WriteIni(System.String,System.String,System.String,System.String)">
            <summary>
            Write value to INI file.
            </summary>
            <param name="filePath">File path.</param>
            <param name="section">Section in the INI file.</param>
            <param name="key">Key in the INI file.</param>
            <param name="value">Value to write.</param>
            <returns></returns>
            <remarks>
            Ronen issue #1235.
            </remarks>
        </member>
        <member name="M:TestExecutive.FileManager.ReadIni(System.String,System.String,System.String,System.String@)">
            <summary>
            Read value from INI file.
            </summary>
            <param name="filePath">File path.</param>
            <param name="section">Section in the INI file.</param>
            <param name="key">Key in the INI file</param>
            <param name="value">Value read from the INI file.</param>
            <remarks>
            Ronen issue #1235.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.FileExists(System.String,System.Int32@)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <param name="fileExists">0 - File does not exist;1 - File exists</param>
            <returns></returns>
            <remarks>
            Ronen issue #1236.
            </remarks>
        </member>
        <member name="M:TestExecutive.FileManager.DisplayDelimitedTextFile(System.String,System.String,System.String,System.String[])">
            <summary>
            Open the text file, parse it by the delimiter specified and display it via grid.
            </summary>
            <param name="formCaption">Form caption.</param>
            <param name="filePath">CSV path path.</param>
            <param name="delimiter">Column separator.</param>
            <param name="columnCaptions">Grid captions.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.LoadNumericColumnFromDelimitedTextFile(System.String,System.String,System.String,System.Double[]@)">
            <summary>
            
            </summary>
            <param name="filePath">File path</param>
            <param name="delimiter">Delimiter used in the file</param>
            <param name="colName">Column name which should be loaded. The name should appears in the first line</param>
            <param name="values">Values array</param>
        </member>
        <member name="M:TestExecutive.FileManager.ProduceTimeFileName(System.String@,System.String,System.String)">
            <summary>
            Produce file name based on the current time in the following format:YY_MM_DD_HH_MM_SS.
            </summary>
            <param name="fileName">Produced file name.</param>
            <param name="prefix">Prefix the concatenate to the file name.</param>
            <param name="surffix">Surffix the concatenate to the file name.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.LoadTextFile(System.String,System.String@)">
            <summary>
            Open text file and return the file content.
            </summary>
            <param name="filePath">File path to load from.</param>
            <param name="fileContent">Loaded content file.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.GetFiles(System.String,System.String[]@,System.Byte,System.String)">
            <summary>
             Returns the names of directories in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="folders">A String array containing the names of files in the specified directory that match the specified search pattern</param>
            <param name="topDirectoryOnly">Operation should include all subdirectories or only the current directory    </param>
            <param name="searchPattern">The search string to match against the names of files in path</param>
        </member>
        <member name="M:TestExecutive.FileManager.WriteTextFile(System.String,System.String,System.Byte)">
            <summary>
            Open text file and set its content.
            </summary>
            <param name="filePath">File path to write to.</param>
            <param name="fileContent">String to write.</param>
            <param name="append">Determines whether data is to be appended to the file</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.MoveFile(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite">True if the destination file can be overwritten, otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.FileManager.ReadXMLAttribute(System.String,System.String,System.String,System.String@,System.Int32)">
            <summary>
            Read XML node attribute.
            </summary>
            <remarks>
            #1585
            </remarks>
            <param name="xmlFilePath">XML file full path. Example: C:\temp.xml</param>
            <param name="nodePath">The node full path(start with /) Example: /node1Name/node2Name/....</param>
            <param name="nodeIndex">In case more than 1 node exists then stores the node position (0..n), otherwise 0</param>
            <param name="attributeName">The attribute name to read from</param>
            <param name="attributeValue">The attribute value read from the XML.</param>
        </member>
        <member name="M:TestExecutive.FileManager.WriteXmlNodeText(System.String,System.String,System.String,System.Int32)">
            <summary>
            Update XNL node text.
            </summary>
            <param name="xmlFilePath">XML file full path. Example: C:\temp.xml</param>
            <param name="nodePath">The node full path(start with /) Example: /node1Name/node2Name/....</param>
            <param name="nodeIndex">In case more than 1 node exists then stores the node position (0..n), otherwise 0</param>
            <param name="text">Text read from the node text</param>
        </member>
        <member name="M:TestExecutive.FileManager.ReadXmlNodeText(System.String,System.String,System.Int32,System.String@)">
            <summary>
            Read XNL node text.
            </summary>
            <param name="xmlFilePath">XML file full path. Example: C:\temp.xml</param>
            <param name="nodePath">The node full path(start with /) Example: /node1Name/node2Name/....</param>
            <param name="nodeIndex">In case more than 1 node exists then stores the node position (0..n), otherwise 0</param>
            <param name="text">Text read from the node attribute</param>
        </member>
        <member name="M:TestExecutive.FileManager.WriteXMLAttribute(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Update XNL node attribute.
            </summary>
            <remarks>
            #1585
            </remarks>
            <param name="xmlFilePath">XML file full path. Example: C:\temp.xml</param>
            <param name="nodePath">The node full path(start with /) Example: /node1Name/node2Name/....</param>
            <param name="nodeIndex">In case more than 1 node exists then stores the node position (0..n), otherwise 0</param>
            <param name="attributeName">The attribute name to read from</param>
            <param name="attributeValue">The attribute value to set</param>
        </member>
        <member name="F:TestExecutive.Files.FrmFileBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.Files.FrmFileBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.Files.FrmFileBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmCSV.AddRow(System.String[])">
            <summary>
            
            </summary>
            <param name="colsValues">List of string. Each item in the list stores the column value in the item position.</param>
        </member>
        <member name="F:TestExecutive.FrmCSV.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmCSV.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmCSV.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestExecutive.FrmProgressbar">
            <summary>
            
            </summary>
            <remarks>
            Maor issue #449696304 - Add "SetMessage"
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmProgressbar.SetValue(System.Int32)">
            <summary>
            Seconds left 
            </summary>
        </member>
        <member name="M:TestExecutive.FrmProgressbar.SetMessage(System.String)">
            <summary>
            Set message
            </summary>
            <param name="message"></param>
            <remarks>
            Maor issue #449696304 - Create method
            </remarks>
        </member>
        <member name="F:TestExecutive.FrmProgressbar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmProgressbar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmProgressbar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmWait.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="pbMax">Total time</param>
            <remarks>
            Issue #1342
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmWait.FrmMain_Load(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            Issue #1342
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmWait.SetTimeLeft(System.Int32)">
            <summary>
            
            </summary>
            <param name="secondsLeft"></param>
            <remarks>
            #1396 - Handle time based on more then 1 day.
            </remarks>
        </member>
        <member name="P:TestExecutive.FrmWait.PbValue">
            <summary>
            Seconds left 
            </summary>
        </member>
        <member name="F:TestExecutive.FrmWait.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmWait.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmWait.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TestExecutive.Graph">
            <summary>
            601442427
            </summary>
        </member>
        <member name="M:TestExecutive.Graph.InitGraph(System.String@,System.Byte,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Byte,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates the graph
            </summary>
            <param name="id">Id of the graph</param>
            <param name="graphType">Type of the graph, Point = 0, FastPoint = 1, Bubble = 2, Line = 3, Spline = 4, StepLine = 5, FastLine = 6, Bar = 7, StackedBar = 8,
            StackedBar100 = 9, Column = 10, StackedColumn = 11, StackedColumn100 = 12, Area = 13, SplineArea = 14, StackedArea = 15, StackedArea100 = 16, Pie = 17, Doughnut = 18,
            Stock = 19, Candlestick = 20, Range = 21, SplineRange = 22,RangeBar = 23, RangeColumn = 24,Radar = 25, Polar = 26,ErrorBar = 27, BoxPlot = 28, Renko = 29, ThreeLineBreak = 30,
            Kagi = 31, PointAndFigure = 32, Funnel = 33, Pyramid = 34 </param>
            <param name="series">Number of functions to display on the graph and their description</param>
            <param name="caption">Caption to be displayed above the graph</param>
            <param name="frmCaption">Caption to be displayed on the form</param>
            <param name="lineWidth">Width of the lines on the graph</param>
            <param name="width">Width in px of the form</param>
            <param name="height">Height in px of the form</param>
            <param name="gridXColor">X Axis Grid Color</param>
            <param name="gridYColor">Y Axis Grid Color</param>
            <param name="bodyBackColor">Chart back color</param>
            <param name="xTitle">Title shown below X axis</param>
            <param name="yTitle">Title shown next to Y Axis</param>
            <param name="minX">Minimum X value shown</param>
            <param name="minY">Minimum Y value shown</param>
            <param name="maxX">Maximum X value shown</param>
            <param name="maxY">Maximum Y value shown</param>
            <param name="displayMode">0 = Fixed min max values, 1 = Auto scaling, 2 = moving chart</param>
            <param name="intervalX">Interval for X-axis. A Value that is below 0 is Automatic interval</param>
            <param name="intervalY">Interval for Y-axis. A Value that is below 0 is Automatic interval</param>
            <param name="axisXisStartedFromZero">sets a flag which indicates whether the minimum value of the X axis will be automatically set to zero if all data point values are positive. If there are negative data point values, the minimum value of the data points will be used.</param>
            <param name="axisYisStartedFromZero">sets a flag which indicates whether the minimum value of the Y axis will be automatically set to zero if all data point values are positive. If there are negative data point values, the minimum value of the data points will be used.</param>
            <param name="xIsLogarithmic"></param>
            <param name="yIsLogarithmic"></param>
            <param name="statisticsDecimalPlaces">Number of decimal place shown in the graph's statistics</param>
            <param name="statisticsWindowSize">Making the graph's statistics a Sliding window - if the value is 0 then sliding window methodology isn't applied</param>
            <param name="graphPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="graphPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="statisticsEnabled"></param>
        </member>
        <member name="M:TestExecutive.Graph.ClearSeries(System.String,System.Int32)">
            <summary>
            Clears the series in the graph
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="index"></param>
        </member>
        <member name="M:TestExecutive.Graph.SaveToReport(System.String,System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
            Add a photo of the current state of the specified graph to the report
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="scaleWidth">Picture width to display in the report.</param>
            <param name="scaleHeight">Picture height to display in the report.</param>
            <param name="horizontalMargin">Not used</param>
            <param name="verticalMargin">Not used</param>
            <param name="remark">Remark to display under the picture</param>
            <remarks>
            #438940413
            </remarks>
        </member>
        <member name="M:TestExecutive.Graph.SaveAsImage(System.String,System.String)">
            <summary>
            Captures a jpeg picture of the current state of the specified graph 
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="path">Full file path without extension</param>
        </member>
        <member name="M:TestExecutive.Graph.AddY(System.String,System.Double[],System.UInt32)">
            <summary>
            Add array of points the graph
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="y">Y Values</param>
            <param name="seriesIndex"></param>
            <remarks>
            #550446237
            #601442427
            </remarks>
        </member>
        <member name="M:TestExecutive.Graph.AddXY(System.String,System.Double[],System.Double[],System.UInt32)">
            <summary>
            Adds a point on the graph
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="x">X Values</param>
            <param name="y">Y Values</param>
            <param name="seriesIndex"></param>
        </member>
        <member name="M:TestExecutive.Graph.AddXY(System.String,System.Double,System.Double,System.String,System.Int32,System.UInt32)">
            <summary>
            Adds a point on the graph
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <param name="text">Text of the point</param>
            <param name="seriesIndex">Index of series</param>
            <param name="pointColor">Color of the point</param>
            <remarks>
            #601442427 - Add text to the point
            </remarks>
        </member>
        <member name="M:TestExecutive.Graph.ClearStatistics(System.String,System.UInt32)">
            <summary>
            Resets the statistics on the given series - avg, min, max, std
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="seriesIndex">Index of series</param>
        </member>
        <member name="M:TestExecutive.Graph.Show(System.String,System.Boolean)">
            <summary>
            Shows the form as modal or not by the Id
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
            <param name="modal">If true, blocks the running test, otherwise doesn't block</param>
        </member>
        <member name="M:TestExecutive.Graph.Close(System.String)">
            <summary>
            The function closes the graph specified
            </summary>
            <param name="id">The id of the graph given after the InitGraph method</param>
        </member>
        <member name="M:TestExecutive.Graph.CloseAllGraphs">
            <summary>
            The function closes all the graphs that have been opened
            </summary>
        </member>
        <member name="M:TestExecutive.Graph.EnableClosingNonModalGraphs">
            <summary>
            Non modal graphs cannot be close manually by the user. Use this function to enbale it.
            </summary>
        </member>
        <member name="F:TestExecutive.Graph.m_syncContext">
            <summary>
            
            </summary>
            <remarks>Stores the OTM GUI SynchronizationContext</remarks>
        </member>
        <member name="M:TestExecutive.Graph.SetSyncronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            The OTM calls to this function in case it exists.
            The m_syncContext lets the user to show non modal form (using the GUI thread). 
            </summary>
            <param name="syncContext"></param>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="T:TestExecutive.ctlGraph">
            <summary>
            The control inherits the chart to override the paint method with try catch, sometimes when resizing the chart it throws an exception so we inherited
            it to handle the exception and redraw
            </summary>
        </member>
        <member name="T:TestExecutive.FrmGraph">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.FrmGraph.#ctor(System.String,System.Byte,System.String[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.Double,System.Double,System.Double,System.Double,TestExecutive.Graph.DisplayMode,System.Double,System.Double,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="graphType"></param>
            <param name="plots"></param>
            <param name="caption"></param>
            <param name="frmCaption"></param>
            <param name="lineWidth"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="gridXColor"></param>
            <param name="gridYColor"></param>
            <param name="bodyBackColor"></param>
            <param name="xTitle"></param>
            <param name="yTitle"></param>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <param name="displayMode"></param>
            <param name="intervalX"></param>
            <param name="intervalY"></param>
            <param name="xIsLogarithmic"></param>
            <param name="yIsLogarithmic"></param>
            <param name="statisticsDecimalPlaces"></param>
            <param name="statisticsWindowSize"></param>
            <param name="statisticsEnabled"></param>
            <param name="axisXisStartedFromZero"></param>
            <param name="axisYisStartedFromZero"></param>
            <param name="graphPosX"></param>
            <param name="graphPosY"></param>
            <remarks>
            #601442427 - statisticsEnabled mechanism
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmGraph.Chart_MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Zoom in/out on the chart
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TestExecutive.FrmGraph.SaveImage(System.String)">
            <summary>
            #1595
            </summary>
        </member>
        <member name="M:TestExecutive.FrmGraph.ZoomIntervalX(System.Double,System.Double)">
            <summary>
            adjusts the intervals according to the zoom for X Axis
            </summary>
            <param name="distance"></param>
            <param name="newDistance"></param>
            <remarks>
            #1596
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmGraph.GetNumDigits(System.Double)">
            <summary>
            Returns the number of digits after the floating point taken from stackoverflow
            </summary>
            <param name="argument"></param>
            /// <remarks>
            #1596
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmGraph.ZoomIntervalY(System.Double,System.Double)">
            <summary>
            adjusts the intervals according to the zoom for Y Axis
            </summary>
            <param name="distance"></param>
            <param name="newDistance"></param>
            /// <remarks>
            #1596
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmGraph.AddXY(System.Double,System.Double,System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Adds a point to the given series index
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="seriesIndex"></param>
            <param name="text">Text of the point</param>
            <param name="pointColor">Point color</param>
            <remarks>
            #601442427 - Enable\Disable statistics
                        Add text to the point
            </remarks>
        </member>
        <member name="M:TestExecutive.FrmGraph.ClearStatistics(System.UInt32)">
            <summary>
            Resets the statistics on the given series - avg, min, max, std
            </summary>
            <param name="seriesIndex"></param>
        </member>
        <member name="F:TestExecutive.FrmGraph.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TestExecutive.FrmGraph.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TestExecutive.FrmGraph.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TestExecutive.Math.STD(System.Double[],System.Double@)">
            <summary>
             Calculates the standard deviation of the elements of the data
            </summary>
            <param name="data"></param>
            <param name="std"></param>
        </member>
        <member name="M:TestExecutive.Math.Median(System.Double[],System.Double@)">
            <summary>
             Returns the value separating the higher half of a data sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="buffer"></param>
            <param name="median"></param>
        </member>
        <member name="M:TestExecutive.Math.MaxArray(System.Double[],System.Double@,System.Int32@,System.Int32,System.Int32)">
            <summary>
             Returns the larger number in tha buffer.
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="startIndex">The zero based index in buffer at which the calculation operation begins</param>
            <param name="endIndex">The zero based index in buffer at which the calculation operation ends. Use -1 to end the calculation in the last item</param>
            <param name="maxValue">The largest number in tha array</param>
            <param name="maxValueIndex">The index of the largest number in tha array</param>
            <remarks>
            Issue #1320
            </remarks>
        </member>
        <member name="M:TestExecutive.Math.MinArray(System.Double[],System.Double@,System.Int32@,System.Int32,System.Int32)">
            <summary>
             Returns the smallest number in tha buffer.
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="startIndex">The zero based index in buffer at which the calculation operation begins</param>
            <param name="endIndex">The zero based index in buffer at which the calculation operation ends. Use -1 to end the calculation in the last item</param>
            <param name="minValue">The smallest number in tha array</param>
            <param name="minValueIndex">The index of the smallest number in tha array</param>
        </member>
        <member name="M:TestExecutive.Math.CalcAverage(System.Double[],System.Double@,System.Int32,System.Int32)">
            <summary>
            Calculate the average of the buffer.
            </summary>
            <param name="buffer">Input buffer.</param>
            <param name="startIndex">The zero based index in buffer at which the calculation operation begins.</param>
            <param name="endIndex">The zero based index in buffer at which the calculation operation ends. Use -1 to end the calculation in the last item</param>
            <param name="average">The computed average.</param>
            <remarks>
            Issue #1320
            </remarks>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.MovingAverage(System.Double[],System.Int32,System.Double[]@)">
            <summary>
            Scan the buffer and replace each item with the average of the previous 'n' items.
            </summary>
            <param name="buffer">Input buffer</param>
            <param name="n">Number of items to take for the arithmetic mean</param>
            <param name="movingAverageBuffer">A new sequence that each item is the average of the previous n items</param>
            <remarks>
            #1320
            </remarks>
        </member>
        <member name="M:TestExecutive.Math.Formula(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="formula"></param>
            <param name="result"></param>
        </member>
        <member name="M:TestExecutive.Math.NormalizeTo_0_360Deg(System.Double,System.Double@)">
            <summary>
            In case value is smaller then 0 then add to it 360.
            </summary>
            <param name="value"></param>
            <param name="normalizedValue"></param>
        </member>
        <member name="M:TestExecutive.Math.And(System.Int32,System.Int32,System.Int32@)">
            <summary>
            The bitwise AND assignment operator.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.OR(System.Int64,System.Int64,System.Int64@)">
            <summary>
            The bitwise  OR assignment operator.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.Word2BCDString(System.UInt16,System.String@)">
            <summary>
            Convert word to BCD format.
            </summary>
            <param name="value">Value to converrt.</param>
            <param name="bcdString">Word in BCD format.</param>
            <returns>BCD string</returns>
        </member>
        <member name="M:TestExecutive.Math.FFT_Tranforml(System.Double[],System.Double[]@)">
            <summary>
            Execute the FFT algorithm and return the Real part of complex number of the result.
            </summary>
            <param name="samples"></param>
            <param name="fftReal"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.Mod(System.Double,System.Double,System.Double@)">
            <summary>
            Computes the remainder after dividing its first operand by its second
            </summary>
            <param name="value">A number (The dividend)</param>
            <param name="divisor">The divisor of a specified number</param>
            <param name="result">the remainder after dividing</param>
            <returns>The quotient of the specified numbers</returns>
            Orit added try  and catch 
        </member>
        <member name="M:TestExecutive.Math.Sin(System.Double,System.Double@)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result">The sine of the specified angle</param>
        </member>
        <member name="M:TestExecutive.Math.Sinh(System.Double,System.Double@)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result">The hyperbolic sine of the specified angle</param>
            <returns>The hyperbolic sine of value.</returns>
        </member>
        <member name="M:TestExecutive.Math.Asin(System.Double,System.Double@)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="value">A number representing a sine, where -1 ≤value≤ 1.</param>
            <param name="result">The angle whose sine is the specified number.</param>
            <remarks>Fixed in  21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Cos(System.Double,System.Double@)">
            <summary>
             Returns the cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result">The cosine of the specified angle</param>
            <remarks>Fixed in  21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Cosh(System.Double,System.Double@)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result"> The hyperbolic cosine of the specified angle</param>
            <remarks>Fixed in  21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Acos(System.Double,System.Double@)">
            <summary>
             Returns the angle whose cosine is the specified number.
            </summary>
            <param name="value">A number representing a cosine, where -1 ≤value≤ 1.</param>
            <param name="result">The angle whose cosine is the specified number.</param>
            <remarks>Fixed in 21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Tan(System.Double,System.Double@)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result">The tangent of value</param>
            <returns>The tangent of the specified angle</returns>
        </member>
        <member name="M:TestExecutive.Math.Tanh(System.Double,System.Double@)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <param name="result">The hyperbolic tangent of the specified angle.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Atan(System.Double,System.Double@)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="value"> A number representing a tangent.</param>
            <param name="result">The angle whose tangent is the specified number.</param>
            <remarks>Fixed in 21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.SetValue(System.Double,System.Double@)">
            <summary>
            Set the specifed numeric value to result.
            </summary>
            <param name="value">Value that should be set to result.</param>
            <param name="result">Parameter that should be set with value.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.GetValue(System.Double,System.Double@)">
            <summary>
            Return the value which stored in the value.
            </summary>
            <param name="value">Value which should be returned.</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.Sqrt(System.Double,System.Double@)">
            <summary>
             Returns the square root of a specified number.
            </summary>
            <param name="value">A number.</param>
            <param name="result">The square root of a specified number</param>
            <returns>One of the values in the following table. d parameter Return value Zero,
             or positive The positive square root of d. Negative System.Double.NaNEquals
             System.Double.NaNSystem.Double.NaNEquals System.Double.PositiveInfinitySystem.Double.PositiveInfinity</returns>
        </member>
        <member name="M:TestExecutive.Math.Div(System.Double,System.Double,System.Double@)">
            <summary>
            Return value/divisor
            </summary>
            <param name="value">A number (The dividend)</param>
            <param name="divisor">The divisor of a specified number</param>
            <param name="result">value/divisor</param>
            <returns>The quotient of the specified numbers</returns>
            Orit added try  and catch 
        </member>
        <member name="M:TestExecutive.Math.Mul(System.Double,System.Double,System.Double@)">
            <summary>
            Calculates: Value1*Value2
            </summary>
            <param name="value1">The first number to multiply</param>
            <param name="value2">The second number to multiply</param>
            <param name="result">Result of Value1*Value2</param>
            <returns>The product of the specified numbers</returns>
        </member>
        <member name="M:TestExecutive.Math.ABS(System.Double,System.Double@)">
            <summary>
            Returns the absolute value of a double-precision floating-point number.
            </summary>         
            <param name="value">A number in the range System.Double.MinValue≤value≤System.Double.MaxValue.</param>
            <param name="result">The absolute value of a double-precision floating-point number.</param>
            <remarks>Fixed in 21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Sub(System.Double,System.Double,System.Double@)">
            <summary>
            Return value1-value2.
            </summary>
            <param name="value1">The minuend value</param>
            <param name="value2">The subtrahend value</param>
            <param name="result">Result of Value1-Value2</param>
            <returns>The difference of the specified numbers</returns>
        </member>
        <member name="M:TestExecutive.Math.SubAbs(System.Double,System.Double,System.Double@)">
            <summary>
            Returns Absolute value of Subtraction operation.
            </summary>
            <param name="value1">The minuend value</param>
            <param name="value2">The subtrahend value</param>
            <param name="result">The absolute value of Subtraction operation</param>
            <returns>The Absolute difference of the specified numbers</returns>
        </member>
        <member name="M:TestExecutive.Math.Add(System.Double,System.Double,System.Double@)">
            <summary>
            Returns value1+value2.
            </summary>
            <param name="value1">The first number in the addition operation.</param>
            <param name="value2">The second number in the addition operation.</param>
            <param name="result">The result of the addtion operation: Value1+Value2.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Round(System.Double,System.Int32,System.Double@,System.MidpointRounding)">
            <summary>
            Rounds a double_precision floating_point value to a specified number of fractional digits.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="result">The number nearest to value that contains a number of fractional digits equal to digits.</param>
            <param name="midpointRounding">
            ToEven-When a number is halfway between two others, it is rounded toward the nearest even number.
            AwayFromZero -  When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Pow(System.Double,System.Double,System.Double@)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <param name="result">The number x raised to the power y.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.Exp(System.Double,System.Double@)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="value"> A number specifying a power.</param>
            <param name="result">The number e raised to the power value. If the value equals System.Double.NaN or System.Double.PositiveInfinity, that value is returned. If d equals System.Double.NegativeInfinity, 0 is returned.</param>
            <remarks>Fixed 21.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.Min(System.Double,System.Double,System.Double@)">
            <summary>
            Returns the smaller of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <param name="result"> Parameter val1 or val2, whichever is smaller.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.Max(System.Double,System.Double,System.Double@)">
            <summary>
            Returns the larger of two double-precision floating-point numbers.
            </summary>
            <param name="val1"> The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2"> The second of two double-precision floating-point numbers to compare.</param>
            <param name="result">Parameter val1 or val2, whichever is larger. </param>
            <remark>Fixed 22.3.17</remark>
        </member>
        <member name="M:TestExecutive.Math.Log10(System.Double,System.Double@)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="value">A number whose logarithm is to be found.</param>
            <param name="result">The base 10 logarithm of a specified number</param>
            <remark>Fixed 22.3.17</remark>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TestExecutive.Math.Log(System.Double,System.Double,System.Double@)" -->
        <member name="M:TestExecutive.Math.LogNatural(System.Double,System.Double@)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="value">A number whose logarithm is to be found.</param>
            <param name="result">The natural (base e) logarithm of a specified number</param>
            <remark>Fixed 22.3.17</remark>
        </member>
        <member name="M:TestExecutive.Math.ConvertDeg2Sec(System.Double,System.Double@)">
            <summary>
            Convert value in degress to seconds.
            </summary>
            <param name="deg">The value in degress.</param>
            <param name="sec">The converted value in seconds.</param>
        </member>
        <member name="M:TestExecutive.Math.ConvertDegToRad(System.Double,System.Double@)">
            <summary>
            Convert value from degress to radian.
            </summary>
            <param name="deg">The value in degress.</param>
            <param name="rad">The converted value in Radians.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.ConvertRadToDeg(System.Double,System.Double@)">
            <summary>
            Convert value from radian to degress.
            </summary>
            <param name="rad"></param>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Math.ConvertDegToMRad(System.Double,System.Double@)">
            <summary>
            Convert value from degress to mRadian.
            </summary>
            <param name="deg">The value in degress.</param>
            <param name="mRad">The converted value in mRadians.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.ConvertMRadToDeg(System.Double,System.Double@)">
            <summary>
            Convert value from mRadian to degress.
            </summary>
            <param name="mRad">The value in mRadians.</param>
            <param name="deg">The converted value in degress.</param>
        </member>
        <member name="M:TestExecutive.Math.ConvertDeg2Minutes(System.Double,System.Double@)">
            <summary>
            Convert value in degress to minutes.
            </summary>
            <param name="deg">The value in degress.</param>
            <param name="sec">The converted value in minutes.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.ConvertDeg2Mil(System.Double,System.Double@)">
            <summary>
            Converts value in degress to mil.
            </summary>
            <param name="deg">The value in degress.</param>
            <param name="mil">The converted value in mil.</param>
            <remarks>Fixed 22.3.17</remarks>
        </member>
        <member name="M:TestExecutive.Math.ConvertMRad2Mil(System.Double,System.Double@)">
            <summary>
            Converts value in mRad to mil.
            </summary>
            <param name="mRad">The value in mRad.</param>
            <param name="mil">The converted value in mil.</param>
        </member>
        <member name="M:TestExecutive.Math.ConvertMil2MRad(System.Double,System.Double@)">
            <summary>
            Converts value in mill to mRad.
            </summary>
            <param name="mil">The value in mil.</param>
            <param name="mRad">The converted value in mRad.</param>
        </member>
        <member name="M:TestExecutive.Math.GetAngleDiffSec(System.Double,System.Double,System.Double@)">
            <summary>
            Return (angle1-angle2) in seconds 
            </summary>
            <param name="angle1Deg">Angle 1 in degress</param>
            <param name="angle2Deg">Angle 2 in degress</param>
            <param name="diff">(angle1-angle2) in seonds</param>
            <returns>The difference of the specified angles in seonds</returns>
        </member>
        <member name="M:TestExecutive.Math.GetAngleDiffMinutes(System.Double,System.Double,System.Double@)">
            <summary>
            Return (angle1-angle2) in minutes 
            </summary>
            <param name="angle1Deg">Angle 1 in degress</param>
            <param name="angle2Deg">Angle 2 in degress</param>
            <param name="diff">(angle1-angle2) in minutes</param>
            <returns>The difference of the specified angles in minutes</returns>
        </member>
        <member name="M:TestExecutive.Math.GetAngleDiffMil(System.Double,System.Double,System.Double@)">
            <summary>
            Return (angle1-angle2) in MIL.
            </summary>
            <param name="angle1Deg"></param>
            <param name="angle2Deg"></param>
            <param name="diff">(angle1-angle2) in mil</param>
            <returns>The difference of the specified angles in Mil</returns>
        </member>
        <member name="M:TestExecutive.Math.CalculateRaiseFallTime(System.Double[],System.Double@,System.Double@,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="buffer">Measured buffer</param>
            <param name="bufferMinIndex">Start scan index in the buffer</param>
            <param name="bufferMaxIndex">Last scan index in the buffer</param>
            <param name="raiseTime">Measured raise time</param>
            <param name="fallTime">Measured falled time</param>
            <param name="timeSeconds">Sample time of the buffer</param>
            <param name="raiseTimeStartPrecent"></param>
            <param name="raiseTimeEndPrecent"></param>
            <param name="fallTimeStartPrecent"></param>
            <param name="fallTimeEndPrecent"></param>
            <remarks>
            Calcuates the rise and fall time of measured buffer.
            1. Maximum should not be calculated.
            2. Moving average of 2 points.
            3. Calculate rise and fall time of 3 points and not only 1 points
            </remarks>
        </member>
        <member name="T:TestExecutive.MessagesBoxes">
            <summary>
            Stores all the OTM message boxes.
            </summary>
        </member>
        <member name="F:TestExecutive.MessagesBoxes.m_handle2Message">
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message.</param>
            <param name="messageCaptionForeColor">Fore color of the message caption.</param>
            <param name="messageBodyFontName">Font of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Fore color of the message body.</param>
            <param name="buttonCaption">Caption of the button</param>
            <param name="buttonFontName">Font of the button caption.</param>
            <param name="buttonFontSize">Font size of the button caption.</param>
            <param name="buttonBackColor">Backcolor of the button.</param>
            <summary>
            Key - Form handle (unique ID).
            Value - Non modal info form.
            </summary>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="F:TestExecutive.MessagesBoxes.m_syncContext">
            <summary>
            
            </summary>
            <remarks>Stores the OTM GUI SynchronizationContext</remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetSyncronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            The OTM calls to this function in case it exists.
            The m_syncContext lets the user to show non modal form (using the GUI thread). 
            </summary>
            <param name="syncContext"></param>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.NumericInputMessage(System.Double@,System.String,System.String,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.String,System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Displays message which lets the user to insert numeric value.
            </summary>
            <param name="value">Input value.</param>
            <param name="formCaption">Caption of the form.</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message caption.</param>
            <param name="messageCaptionForeColor">Forecolor of the the message caption.</param>
            <param name="messageBodyFontName">Font name of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Forecolor of the message body.</param>
            <param name="unitName">Unit name which is displayed near the numeric input.</param>
            <param name="decimalPlaces">Decimal place of the numeric input (precision).</param>
            <param name="min">Minimum value of the numeric input.</param>
            <param name="max">Maximum value of the numeric input.</param>
            <param name="defaultValue">The default value of the numeric input</param>
            <param name="button1Caption">Caption of the first button.</param>
            <param name="button1FontName">Font name of the first button.</param>
            <param name="button1FontSize">Font size of the first button.</param>
            <param name="button1BackColor">Backcolor of the first button.</param>
            <param name="button2Caption">Caption of the second button.</param>
            <param name="button2FontName">Font name of the second button.</param>
            <param name="button2FontSize">Font size of the second button.</param>
            <param name="button2BackColor">Backcolor of the second button</param>
            <param name="numericFontName">Font name which is used in the numeric input.</param>
            <param name="numericFontSize">Font size which is used in the numeric input.</param>
            <param name="numericBackColor">Backcolor which is used in the numeric input.</param>
            <param name="numericForeColor">Forecolor which is used in the numeric input.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.MultipleNumericInputMessage(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String[],System.String[],System.Double[],System.Double[],System.Int32[],System.Double[],System.String,System.String,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Displays message which lets the user to insert multiple numeric values.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <param name="value6"></param>
            <param name="value7"></param>
            <param name="value8"></param>
            <param name="value9"></param>
            <param name="value10"></param>
            <param name="value11"></param>
            <param name="value12"></param>
            <param name="valuesMin">The minimum allowed value for the controls.</param>
            <param name="valuesMax">The maximum allowed value for the controls.</param>
            <param name="valuesDecimalPlaces">The number of decimal places to display in the controls.</param>
            <param name="valuesCaptions">Indicate how many numeric controls are displayed and their captions,</param>
            <param name="valuesUnits"></param>
            <param name="defaultValues">The default value for the controls</param>
            <param name="formCaption">Caption of the form.</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message caption.</param>
            <param name="messageCaptionForeColor">Forecolor of the the message caption.</param>
            <param name="messageBodyFontName">Font name of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Forecolor of the message body.</param>
            <param name="button1Caption">Caption of the first button.</param>
            <param name="button1FontName">Font name of the first button.</param>
            <param name="button1FontSize">Font size of the first button.</param>
            <param name="button1BackColor">Backcolor of the first button.</param>
            <param name="button2Caption">Caption of the second button.</param>
            <param name="button2FontName">Font name of the second button.</param>
            <param name="button2FontSize">Font size of the second button.</param>
            <param name="button2BackColor">Backcolor of the second button</param>
            <param name="numericFontName">Font name which is used in the numeric input.</param>
            <param name="numericFontSize">Font size which is used in the numeric input.</param>
            <param name="numericBackColor">Backcolor which is used in the numeric input.</param>
            <param name="numericForeColor">Forecolor which is used in the numeric input.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.StringInputMessage(System.String@,System.String,System.String,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.String,System.Int32,System.Double,System.Double,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Displays message which lets the user to insert string value.
            </summary>
            <param name="value">Input value.</param>
            <param name="formCaption">Caption of the form.</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message caption.</param>
            <param name="messageCaptionForeColor">Forecolor of the the message caption.</param>
            <param name="messageBodyFontName">Font name of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Forecolor of the message body.</param>
            <param name="unitName">Unit name which is displayed near the numeric input.</param>
            <param name="decimalPlaces">Decimal place of the numeric input (precision).</param>
            <param name="min">Minimum value of the numeric inpuit.</param>
            <param name="max">Maximum value of the numeric input.</param>
            <param name="button1Caption">Caption of the first button.</param>
            <param name="button1FontName">Font name of the first button.</param>
            <param name="button1FontSize">Font size of the first button.</param>
            <param name="button1BackColor">Backcolor of the first button.</param>
            <param name="button2Caption">Caption of the second button.</param>
            <param name="button2FontName">Font name of the second button.</param>
            <param name="button2FontSize">Font size of the second button.</param>
            <param name="button2BackColor">Backcolor of the second button</param>
            <param name="numericFontName">Font name which is used in the numeric input.</param>
            <param name="numericFontSize">Font size which is used in the numeric input.</param>
            <param name="numericBackColor">Backcolor which is used in the numeric input.</param>
            <param name="numericForeColor">Forecolor which is used in the numeric input.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.InfoMessage(System.String,System.String,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Double)">
            <summary>
            Displays modal info message.
            </summary>
            <param name="formCaption">Caption of the form</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message.</param>
            <param name="messageCaptionForeColor">Fore color of the message caption.</param>
            <param name="messageBodyFontName">Font of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Fore color of the message body.</param>
            <param name="buttonCaption">Caption of the button</param>
            <param name="buttonFontName">Font of the button caption.</param>
            <param name="buttonFontSize">Font size of the button caption.</param>
            <param name="buttonBackColor">Backcolor of the button.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
            <param name="autoCloseTime">In case value is bigger than 0, the message will be closed automatically after this time</param>
            <returns></returns>
            <remarks>
             Ronen issue#1314 - Add the string imagePath="",int imageSizeWidth=250,int imageSizeHeight=200
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.ModelessInfoMessage(System.String@,System.String,System.String,System.String,System.String,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Boolean,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Displays modeless message box, which stays on the screen and is available for use at any time but permit other user activities.
            </summary>
            <param name="formCaption">Caption of the form</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message.</param>
            <param name="messageCaptionForeColor">Fore color of the message caption.</param>
            <param name="messageBodyFontName">Font of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Fore color of the message body.</param>
            <param name="buttonCaption">Caption of the button</param>
            <param name="buttonFontName">Font of the button caption.</param>
            <param name="buttonFontSize">Font size of the button caption.</param>
            <param name="buttonBackColor">Backcolor of the button.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
            <param name="messageHandle">Message handle. Use this handle to close the message in later steps.</param>
            <param name="userCanClose">Indicates if the user can close the message box.</param>
            <returns></returns>
            <remarks>
             Ronen issue#1314 - Add the string imagePath="",int imageSizeWidth=250,int imageSizeHeight=200
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.CloseMessage(System.String)">
            <summary>
            Closes a non modal message.
            </summary>
            <param name="messageHandle">Handle receive from 'NonModalInfoMessage' function.</param>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.CloseAllMessage">
            <summary>
            Closes all the non modal messages.
            </summary>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetTextMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Set text to specific message
            </summary>
            <param name="messageHandle">Handle receive from 'NonModalInfoMessage' function.</param>
            <param name="formCaption">Caption of the form</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <remarks>
            Maor issue #449529681 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetFormCaptionMessage(System.String,System.String)">
            <summary>
            Set form caption to specific message
            </summary>
            <param name="messageHandle">Handle receive from 'NonModalInfoMessage' function.</param>
            <param name="formCaption">Caption of the form</param>
            <remarks>
            Maor issue #449529681 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetMessageCaption(System.String,System.String)">
            <summary>
            Set message caption to specific message
            </summary>
            <param name="messageHandle">Handle receive from 'NonModalInfoMessage' function.</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <remarks>
            Maor issue #449529681 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetMessageBody(System.String,System.String)">
            <summary>
            Set message body to specific message
            </summary>
            <param name="messageHandle">Handle receive from 'NonModalInfoMessage' function.</param>
            <param name="messageBody">Message body.</param>
            <remarks>
            Maor issue #449529681 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetFormProperties(TestExecutive.FrmOTMMessage,System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="formTopMost"></param>
            <param name="formPosX"></param>
            <param name="formPosY"></param>
            <param name="formBackColor"></param>
            <remarks>
            Ronen issue #1254
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SetFormProperties(TestExecutive.GUI.MessagesForms.FrmOTMMessageBase,System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="formTopMost"></param>
            <param name="formPosX"></param>
            <param name="formPosY"></param>
            <param name="formBackColor"></param>
            <remarks>
            #1509
            </remarks>
        </member>
        <member name="M:TestExecutive.MessagesBoxes.SelectionMessage(System.Int32@,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Displays buttons selection message.
            </summary>
            <param name="buttonPressed">Stored the button index pressed by the user.</param>
            <param name="formCaption">Caption of the form</param>
            <param name="messageCaption">Message caption (displayed above the main message).</param>
            <param name="messageBody">Message body.</param>
            <param name="messageCaptionFontName">Font name of the message caption.</param>
            <param name="messageCaptionFontSize">Font size of the message.</param>
            <param name="messageCaptionForeColor">Fore color of the message caption.</param>
            <param name="messageBodyFontName">Font of the message body.</param>
            <param name="messageBodyFontSize">Font size of the message body.</param>
            <param name="messageBodyForeColor">Fore color of the message body.</param>
            <param name="button1Caption">Caption of the button1.</param>
            <param name="button1FontName">Font of button1.</param>
            <param name="button1FontSize">Font size of button1.</param>
            <param name="button1BackColor">BackColor of button1.</param>
            <param name="button2Caption">Caption of the button2.</param>
            <param name="button2FontName">Font of button2.</param>
            <param name="button2FontSize">Font size of button2.</param>
            <param name="button2BackColor">BackColor of button2.</param>
            <param name="button3Caption">Caption of the button3. -1 caption hides the button.</param>
            <param name="button3FontName">Font of button3</param>
            <param name="button3FontSize">Font size of button3</param>
            <param name="button3BackColor">BackColor of button3</param>
            <param name="button4Caption">Caption of the button4. -1 caption hides the button.</param>
            <param name="button4FontName">Font of button4</param>
            <param name="button4FontSize">Font size of button4</param>
            <param name="button4BackColor">BackColor of button4</param>
            <param name="button5Caption">Caption of the button5. -1 caption hides the button.</param>
            <param name="button5FontName">Font of button5</param>
            <param name="button5FontSize">Font size of button5</param>
            <param name="button5BackColor">BackColor of button5.</param>
            <param name="formPosX">Use this parameter to specify custom position X the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formPosY">Use this parameter to specify custom position Y the message should be displayed. Use -1 to display the message in the center of the screen.</param>
            <param name="formTopMost">Indicates whether message box appears above all other windows.</param>
            <param name="formBackColor">The background color of the form.</param>
            <param name="beepIntervalMsec">The time, in milliseconds between two beeps</param>
            <param name="beepNumberOfRepetitions">0 - Disable; -1-Infinite >0 finite</param>
            <param name="image">Image to display.</param>
            <param name="imageSizeHeight">Image height</param>
            <param name="imageSizeWidth">Image width.</param>
            <returns></returns>
        </member>
        <member name="F:TestExecutive.ProcessManager.m_activeProcesses">
            <summary>
            Key - process ID
            Value - Process instant
            </summary>
        </member>
        <member name="M:TestExecutive.ProcessManager.GetProcessExitCode(System.Int32)">
            <summary>
            Gets the value that the associated process specified when it terminated.
            </summary>
            <param name="processId">Process Id returned by 'ExecuteApplication'</param>
            <returns>The code that the associated process specified when it terminated.</returns>
            <remarks>
            Maor issue #422941520 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.RemoveProcess(System.Int32)">
            <summary>
            
            </summary>
            <param name="processId"></param>
            <returns></returns>
            <remarks>
            Maor issue #422941520 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.Add2ActiveProcesList(System.Diagnostics.Process)">
            <summary>
            Add the process in dictionary in order to get its status later.
            </summary>
            <param name="p"></param>
            <remarks>
            Maor issue #422941520 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.GetClassInstant(System.String,System.String,System.Object@)">
            <summary>
            Return instant of class which is already used during the OTM execution. Use this function in order to share class instants between different DLLs.
            </summary>
            <param name="dllName">DLL name as it specified in the OTM Test Editor.</param>
            <param name="className">Class name as it specified in the OTM Test Editor.</param>
            <param name="classInstant"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.ProcessExist(System.String,System.Int32@)">
            <summary>
            Check if process is running.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extension.</param>
            <param name="processExist">1 in case process exists, otherwise 0.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.ProcessExist(System.Int32,System.Int32@)">
            <summary>
            Check if process is running.
            </summary>
            <param name="processId">Process id</param>
            <param name="processExist">1 in case process exists, otherwise 0.</param>
            <remarks>
            Maor issue #458839583 - Create function
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.KillProcess(System.String)">
            <summary>
            Kill process.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extension</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.SetWindowsMaximize(System.String)">
            <summary>
            Set windows to maximize.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extesnsion.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.SetWindowsMinimize(System.String)">
            <summary>
            Set windows to minimize.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extesnsion.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.ExecuteProcess(System.String,System.Object@)">
            <summary>
            Execute process and return the process handle. Use this function in case you want to set the process settings later. For example show it maximize. 
            </summary>
            <param name="applicationPath">Full path of the procss that should be executed.</param>
            <param name="processHandle">The process handle.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.SetWindowsState(System.Object,System.Int32)">
            <summary>
            Set process window to maximize.
            </summary>
            <param name="processHandle">Process hande that returned by ExecuteProcess.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.SetWindowTopMost(System.Object,System.Byte)">
            <summary>
            Sets windows as top most.
            </summary>
            <param name="processHandle">Process hande that returned by ExecuteProcess.</param>
        </member>
        <member name="M:TestExecutive.ProcessManager.SetWindowTopMost(System.String,System.Byte)">
            <summary>
            Set windows to top most or non top most.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extesnsion.</param>
            <param name="topMost">0-Non top most; 1=Top most</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.ProcessManager.SendKeyStrokes(System.String,System.String)">
            <summary>
            Sends the given keys to the active application, and then waits for the messages to be processed.
            </summary>
            <param name="processName">Process name as it displayed in the task manager without extesnsion.</param>
            <param name="keys">The string of keystrokes to send. SHIFT +; CTRL ^ ALT %. For example SendKeys.SendWait("+(%(S))") sends Alt+shift+S </param>
            <remarks>
            Ronen issue #1284.
            SendKeys.SendWait("+(%(S))")
            See key codes in https://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys(v=vs.110).aspx
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.KillProcess(System.Object)">
            <summary>
            Close process created by ExecutedProcess.
            </summary>
            <param name="processHandle">Process handle that returned by ExecuteProcess.</param>
            <returns></returns>
            <remarks>
            Maor issue #422941520
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.KillProcess(System.Int32)">
            <summary>
            Kill process by processId
            </summary>
            <param name="processId">Process Id returned by 'ExecuteApplication'</param>
            <remarks>
            Maor issue #422941520 - Create function
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.GetProcessById(System.Int32)">
            <summary>
            
            </summary>
            <param name="processId"></param>
            <returns></returns>
            <remarks>
            Maor issue #422941520 - Create function
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.GetAssemblyVersion(System.String,System.String@)">
            <summary>
            Return the version information  associated with the specified file.
            </summary>
            <param name="filePath">The fully qualified path and name of the file to retrieve the version informationfor</param>
            <param name="version">The version associated with the specified file</param>
            <returns></returns>
            <remarks>
            #558397525
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.GetAssemblyInfo(System.String,System.DateTime@,System.DateTime@)">
            <summary>
            Getes the the creation and modifed dates of the file
            </summary>
            <param name="filePath"></param>
            <param name="creationDate">Gets the creation time of the current file or directory</param>
            <param name="modifiedDate">Gets the time when the current file or directory was last written to</param>
            <remarks>
            #558397525
            </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.ExecuteApplicationWithArguments(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.String,System.Diagnostics.ProcessWindowStyle)">
             <summary>
             Execute application with arguments and wait until it terminated or timeout occured.
             </summary>
             <param name="processId">Use it later for closing the process.</param>
             <param name="applicationPath">Full path of the procss that should be executed.</param>
             <param name="waitUntilComplete">0 - Do not wait for the associated process to exit. 1 - Wait for the associated process to exit.</param>
             <param name="waitTimeoutSec">Maximum time to wait for process to exit. Set to -1 in case you want to wait indefinitely for the associated process to exit.</param>
             <param name="arguments">Command-line arguments to use when starting the application. Multiple arguments should be separated by spaces</param>
            <param name="workingDirectory">Gets or sets the initial directory for the process to be started</param>
             <returns>Process exit code. Return 0 if the process is not terminated</returns>
             <param name="windowStyle">Sets the window state to use when the process is started.</param>
             <remarks>
             Ronen issue #1271.
             Maor issue #422941520- Add "processId" out param
             Issue #494755952 add window style parameter.
             </remarks>
        </member>
        <member name="M:TestExecutive.ProcessManager.ExecuteApplication(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Diagnostics.ProcessWindowStyle)">
             <summary>
             Execute application and wait until it terminated or timeout occured.
             </summary>
             <param name="processId">Use it later for closing the process.</param>
             <param name="applicationPath">Full path of the procss that should be executed.</param>
             <param name="waitUntilComplete">0 - Do not Wait for the associated process to exit. 1 - Wait for the associated process to exit.</param>
             <param name="waitTimeoutSec">Maximum time to wait for process to exit. Set to -1 in case you want to wait indefinitely for the associated process to exit.</param>
            <param name="workingDirectory">Gets or sets the initial directory for the process to be started</param>
            <param name="windowStyle">Sets the window state to use when the process is started.</param>
             <returns>Process exit code. Return 0 if the process is not terminated</returns>
             <remarks>
             Maor issue #422941520 - Add "processId" out param
             Issue #494755952 add window style parameter.
             </remarks>
        </member>
        <member name="F:TestExecutive.Progressbar.m_syncContext">
            <summary>
            
            </summary>
            <remarks>Stores the OTM GUI SynchronizationContext</remarks>
        </member>
        <member name="M:TestExecutive.Progressbar.SetSyncronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            The OTM calls to this function in case it exists.
            The m_syncContext lets the user to show non modal form (using the GUI thread). 
            </summary>
            <param name="syncContext"></param>
            <remarks>
            #1476
            </remarks>
        </member>
        <member name="M:TestExecutive.Progressbar.Display(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Displays progress form.
            </summary>
            <param name="formCaption">Caption of the form.</param>
            <param name="message">Message to display above the progressbar.</param>
            <param name="pbMax">Maximum value of the prgressbar.</param>
            <param name="fontSize">The Font of the labels in the form.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Progressbar.SetValue(System.Int32)">
            <summary>
            Sets the value of the progressbar.
            </summary>
            <param name="value">Progress value to set.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Progressbar.SetMessage(System.String)">
            <summary>
            Set message to progress bar
            </summary>
            <param name="message">Progress bar message to set.</param>
            <remarks>
            Maor issue #449696304 - Create method
            </remarks>
        </member>
        <member name="M:TestExecutive.Progressbar.Close">
            <summary>
            Close the form.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TestExecutive.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TestExecutive.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestExecutive.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:TestExecutive.Report.SetReportFolderPath(System.String)">
            <summary>
            Sets the folder path where the report will be created for the current UUT.
            </summary>
            <param name="reportFolderPath"></param>
            <remarks>
            Issue #1444
            </remarks>
        </member>
        <member name="M:TestExecutive.Report.AddStepCaption(System.String,System.String@,System.Byte)">
            <summary>
            Add caption to the report. This caption will be added above the steps appear below it.
            </summary>
            <param name="caption">Caption to add.</param>
            <param name="excludeInCompactReport">1 - Caption should be excluded in compact reports</param>
            <param name="systemParam"></param>
            <returns></returns>
            <remarks>
            Issue #1172.
            I add the out 'systemParam' variable in order to insert this step to output variables in order to get in the select query. 
            Issue #1445 Add new variable - 'excludeInCompactReport'.
            </remarks>
        </member>
        <member name="M:TestExecutive.Report.AddCSV(System.String,System.String,System.String)">
            <summary>
            Add CSV to the report
            </summary>
            <param name="caption">Caption to print in the report above the CSV table.</param>
            <param name="filePath">CSV file path.</param>
            <param name="delimiter">Delimiter should be used for parsing the CSV file.</param>
            <remarks>
            Ronen issue #1294.
            </remarks>
        </member>
        <member name="M:TestExecutive.Report.AddTextFile(System.String,System.String)">
            <summary>
            Add text file to the report
            </summary>
            <param name="caption">Caption to print in the report above the CSV table.</param>
            <param name="filePath">File path.</param>
            <remarks>
            Ronen issue #1294.
            </remarks>
        </member>
        <member name="M:TestExecutive.Report.AddRemark(System.String)">
            <summary>
            Add remark to the report. This remark will be printed in the details section of the test.
            </summary>
            <param name="remark">Remark to add.</param>
            <remarks>
            Ronen issue #1315
            </remarks>
        </member>
        <member name="M:TestExecutive.Report.AddPicture(System.String,System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
            Add speciifed picture to the report.
            </summary>
            <param name="filePath">Picture file path.</param>
            <param name="scaleWidth">Picture width to display in the report.</param>
            <param name="scaleHeight">Picture height to display in the report.</param>
            <param name="horizontalMargin">Not used</param>
            <param name="verticalMargin">Not used</param>
            <param name="remark">Remark to display under the picture</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Report.SetCycleCaption(System.Int32,System.String)">
            <summary>
            Set the cycle caption in the report.
            </summary>
            <param name="cycleIndex">1..n</param>
            <param name="cycleCaption">Caption that should nbe printed in the report.</param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:TestExecutive.ScreenManager.CaptureWindow(System.String,System.String,System.Int32)">
            <summary>
            Save a snapshot of the screen to a file. 
            </summary>
            <param name="processName"></param>
            <param name="fileName"></param>
            <param name="imageFormat">1-BMP;2-jpg</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.ReadSubstringInDelimitedString(System.String,System.String,System.Int32,System.String@)">
            <summary>
            Splits the string using the 'separator' and returns the sub string that is stored in the 'index' position.
            </summary>
            <param name="inputString"></param>
            <param name="separator"></param>
            <param name="index"></param>
            <param name="subString"></param>
        </member>
        <member name="M:TestExecutive.Strings.Concatenate(System.String,System.String,System.String@)">
            <summary>
            Concatenates two strings.
            </summary>
            <param name="str1">The first string</param>
            <param name="str2">The second string</param>
            <param name="result">The concatenation of str1 and str2.</param>
            <returns>A string that consists from the two strings that are concatenating together</returns>
        </member>
        <member name="M:TestExecutive.Strings.ConcatenateArray(System.String[],System.String@)">
            <summary>
            Concatenates two strings.
            </summary>
            <param name="strList">String list to concatenate</param>
            <param name="result">The concatenation of strList</param>
            <returns>A string that consists from the string list that are concatenating together</returns>
        </member>
        <member name="M:TestExecutive.Strings.CompareStr(System.String,System.String,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Compares substrings of two specified System.String objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order
            </summary>
            <param name="strA">The first string to use in the comparison</param>
            <param name="indexA">The position of the substring within strA</param>
            <param name="strB">The second string to use in the comparison</param>
            <param name="indexB">The position of the substring within strB</param>
            <param name="length">The maximum number of characters in the substrings to compare</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false</param>
            <param name="result">Less than zero The substring in strA is less than the substring in strB. Zero The substrings are equal, or length is zero. Greater than zero The substring in strA is greater than the substring in
             strB</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the
             two comparands.ValueCondition Less than zero The substring in strA is less
             than the substring in strB. Zero The substrings are equal, or length is zero.
             Greater than zero The substring in strA is greater than the substring in
             strB</returns>
        </member>
        <member name="M:TestExecutive.Strings.ContainsStr(System.String,System.String,System.Int32@)">
            <summary>
            Returns a value indicating whether the specified System.String object occurs
            within this string.
            </summary>
            <param name="str1">The string to copy.</param>
            <param name="value">The string to seek.</param>
            <param name="result">The result of the comparison:1 - The value parameter occurs within this string ; 0 - The value parameter does't occurs within this string</param>
            <returns>true if the value parameter occurs within this string, or if value is the
             empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Copy(System.String,System.String@)">
            <summary>
            Creates a new instance of System.String with the same value as a specified
            System.String.
            </summary>
            <param name="str">The string to copy.</param>
            <param name="result">A new string with the same value as str</param>
            <returns>A new string with the same value as str.</returns>
        </member>
        <member name="M:TestExecutive.Strings.EndsWith(System.String,System.String,System.Int32@)">
            <summary>
             Determines whether the end of this string instance matches the specified
             string.
            </summary>
            <param name="str1">The string object</param>
            <param name="value">The string to compare to the substring at the end of this instance.</param>
            <param name="result">The result of the comparison: match=true=1 ; No match=false=0</param>
            <returns>True if value matches the end of this instance; otherwise, false.</returns>
        </member>
        <member name="M:TestExecutive.Strings.EqualsSTR(System.String,System.String,System.Int32@,System.Int32)">
            <summary>
            Determines whether two specified T:System.String objects have the same value.
            A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">The first string to compare, or null.</param>
            <param name="b">The second string to compare, or null.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.
            CurrentCulture = 0,CurrentCultureIgnoreCase = 1,InvariantCulture = 2,InvariantCultureIgnoreCase = 3,
            Ordinal = 4,OrdinalIgnoreCase = 5</param>
            <param name="result">The result of the comparison:1 - equal ;0 - Not equal</param>
            <returns>True if the value of the a parameter is equal to the value of the b parameter;
             otherwise, false.</returns>
        </member>
        <member name="M:TestExecutive.Strings.GetHashCodeStr(System.String,System.Int32@)">
            <summary>
            Returns the hash code for this string.
            </summary>
            <param name="str1">The string object</param>
            <param name="result">A 32-bit signed integer hash code</param>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:TestExecutive.Strings.IndexOf(System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Reports the index of the first occurrence of the specified string in this
            instance. The search starts at a specified character position.
            </summary>
            <param name="str1">The string object</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="result">The zero-based index position of value if that string is found, or -1 if
             it is not. If value is System.String.Empty, the return value is startIndex.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if
             it is not. If value is System.String.Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Insert(System.String,System.Int32,System.String,System.String@)">
            <summary>
             Inserts a specified instance of System.String at a specified index position
             in this instance.
            </summary>
            <param name="str1">The string object</param>
            <param name="startIndex">The index position of the insertion.</param>
            <param name="value">The string to insert.</param>
            <param name="result">A new string that is equivalent to this instance, but with value inserted
             at position startIndex</param>
            <returns>A new string that is equivalent to this instance, but with value inserted
             at position startIndex.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Intern(System.String,System.String@)">
            <summary>
            Retrieves the system's reference to the specified System.String.
            </summary>
            <param name="str">A string to search for in the intern pool.</param>
            <param name="result">The system's reference to str, if it is interned; otherwise, a new reference
             to a string with the value of str</param>
            <returns>The system's reference to str, if it is interned; otherwise, a new reference
             to a string with the value of str.</returns>
        </member>
        <member name="M:TestExecutive.Strings.IsInternedStr(System.String,System.String@)">
            <summary>
            Retrieves a reference to a specified System.String.
            </summary>
            <param name="str">The string to search for in the intern pool.</param>
            <param name="result">A reference to str if it is in the common language runtime intern pool; otherwise,
             null</param>
            <returns>A reference to str if it is in the common language runtime intern pool; otherwise,
             null.</returns>
        </member>
        <member name="M:TestExecutive.Strings.IsNormalized(System.String,System.Int32@)">
            <summary>
            Indicates whether this string is in Unicode normalization form C.
            </summary>
            <param name="str1">The string object</param>
            <param name="result">The result of the comparison:1 - normalization form ;0 - Not in normalization form</param>
            <returns>true if this string is in normalization form C; otherwise, false.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Join(System.String,System.String[],System.String@)">
            <summary>
            Concatenates all the elements of a string array, using the specified separator
            between each element.
            </summary>
            <param name="separator">The string to use as a separator.</param>
            <param name="value">An array that contains the elements to concatenate.</param>
            <param name="result">A string that consists of the elements in value delimited by the separator
             string</param>
            <returns>A string that consists of the elements in value delimited by the separator
             string.</returns>
        </member>
        <member name="M:TestExecutive.Strings.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reports the index position of the last occurrence of a specified string within
            this instance. The search starts at a specified character position and examines
            a specified number of character positions.
            </summary>
            <param name="str1">The string object</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="result">The index position of the last occurrence of a specified string</param>
            <returns>The zero-based index position of value if that string is found, or -1 if
             it is not. If value is System.String.Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:TestExecutive.Strings.PadLeft(System.String,System.Int32,System.String@,System.String)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.
            </summary>
            <param name="paddingChar">A Unicode padding character.</param>
            <param name="str1">The string object</param>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of
            original characters plus any additional padding characters.</param>
            <param name="result">a new string that right-aligns the characters in this instance by
            padding them with spaces on the left, for a specified total length</param>
            <returns>A new string that is equivalent to this instance, but right-aligned and padded
             on the left with as many spaces as needed to create a length of totalWidth.
             Or, if totalWidth is less than the length of this instance, a new string
             that is identical to this instance.</returns>
             <remarks>
             #601478603
             </remarks>
        </member>
        <member name="M:TestExecutive.Strings.PadRight(System.String,System.Int32,System.String@,System.String)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding
            them with spaces on the right, for a specified total length.
            </summary>
            <param name="str1">The string object</param>
            <param name="paddingChar">A Unicode padding character</param>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of
            original characters plus any additional padding characters.</param>
            <param name="result">A new string that left-aligns the characters in this string by padding
            them with spaces on the right, for a specified total length</param>
            <returns> A new string that is equivalent to this instance, but left-aligned and padded
             on the right with as many spaces as needed to create a length of totalWidth.
             Or, if totalWidth is less than the length of this instance, a new string
             that is identical to this instance.</returns>
             <remarks>
             #601478603
             </remarks>
        </member>
        <member name="M:TestExecutive.Strings.Remove(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Deletes a specified number of characters from this instance beginning at a specified position.
            </summary>
            <param name="str1">The string object</param>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <param name="count">The number of characters to delete.</param>
            <param name="result">A new string that is equivalent to this instance except for the removed characters</param>
            <returns> A new string that is equivalent to this instance except for the removed characters.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Replace(System.String,System.String,System.String,System.String@)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the
            current instance are replaced with another specified string.
            </summary>
            <param name="str1">The string object</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <param name="result">A new string in which all occurrences of a specified string in the
            current instance are replaced with another specified string</param>
            <returns> A string that is equivalent to the current string except that all instances
            of oldValue are replaced with newValue.</returns>
        </member>
        <member name="M:TestExecutive.Strings.EqualsStrings(System.String,System.String,System.Int32@)">
            <summary> 
            Determines whether two specified System.String objects have the same value.
            </summary>
            <param name="a">The first string to compare, or null.</param>
            <param name="b">The second string to compare, or null.</param>
            <param name="result"> 1- if the value of a is the same as the value of b; 0 - otherwise</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.Split(System.String,System.String,System.String[]@,System.Int32)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. A paramete specifies whether to return empty array elements.
            </summary>
            <param name="str1">The string object</param>
            <param name="separator">A Unicode characters that delimit the substrings in this string.</param>
            <param name="options">None = 0; RemoveEmptyEntries = 1</param>
            <param name="result">A string array that contains the substrings</param>
            <returns> An array whose elements contain the substrings in this string that are delimited by one or more characters in separator</returns>
        </member>
        <member name="M:TestExecutive.Strings.StartsWith(System.String,System.String,System.Int32@)">
            <summary>
             Determines whether the beginning of this string instance matches the specified
             string.
            </summary>
            <param name="str1">The string object</param>
            <param name="str2">The string to compare.</param>
            <param name="result">The result of the comparison: match=true=1 ; No match=false=0</param>
            <returns>True if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Substring(System.String,System.Int32,System.String@,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and has a specified length.
            </summary>
            <param name="str1">The string object</param>
            <param name="startIndex">The zero-based starting character position of a substring in this instance</param>
            <param name="length">The number of characters in the substring. -1:full length.</param>
            <param name="result">A substring from string instance</param>
            <returns>A string that is equivalent to the substring of length length that begins
            at startIndex in this instance, or System.String.Empty if startIndex is equal
            to the length of this instance and length is zero</returns>
        </member>
        <member name="M:TestExecutive.Strings.ToLowerInvariant(System.String,System.String@)">
            <summary>
            Returns a copy of this System.String object converted to lowercase using
            the casing rules of the invariant culture.
            </summary>
            <param name="str1">The string object</param>
            <param name="result"></param>
            <returns>The lowercase equivalent of the current string.</returns>
        </member>
        <member name="M:TestExecutive.Strings.ToUpperInvariant(System.String,System.String@)">
            <summary>
            Returns a copy of this System.String object converted to uppercase using 
            the casing rules of the invariant culture.
            </summary>
            <param name="str1">The string object</param>
            <param name="result"></param>
            <returns>The uppercase equivalent of the current string.</returns>
        </member>
        <member name="M:TestExecutive.Strings.Trim(System.String,System.String@)">
            <summary>
            Removes all leading and trailing white-space characters from the current 
            System.
            </summary>
            <param name="str1">The string object</param>
            <param name="result">The string that remains</param>
            <returns>The string that remains after all white-space characters are removed from
            the start and end of the current string.</returns>
        </member>
        <member name="M:TestExecutive.Strings.UNSHORT2Hex(System.UInt16,System.String@)">
            <summary>
            Convert unsigned short value to hexdecimal string. 
            </summary>
            <param name="num">number to convert.</param>
            <param name="hexValue">Hexdecimal string</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.GetValueFromBuffer(System.String[],System.Int32,System.String@)">
            <summary>
            Extract string from buffer of strings.
            </summary>
            <param name="buffer">Buffer of strings.</param>
            <param name="index">Index of string to extract.</param>
            <param name="value">String extracted from the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.GetLength(System.String)">
            <summary>
            Gets the number of characters in the current System.String object
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.ConvertToInt(System.String,System.Int32@)">
            <summary>
            Convert string to Int32.
            </summary>
            <param name="sValue">String that should be converted.</param>
            <param name="value">Converted Int32 value.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.ConvertToUInt(System.String,System.UInt32@)">
            <summary>
            Convert string to UInt32.
            </summary>
            <param name="sValue">String that should be converted.</param>
            <param name="value">Converted UInt32 value.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Strings.ConvertToDouble(System.String,System.Double@)">
            <summary>
            Convert string to double.
            </summary>
            <param name="sValue">String that should be converted.</param>
            <param name="value">Converted double value.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Shell.ExecuteApplication(System.String,System.Int32,System.Int32)">
            <summary>
            This function is not used anymore. Use the ProcessManager.ExecuteApplication instead.
            </summary>
            <param name="applicationPath">Full path of the procss that should be executed.</param>
            <param name="waitUntilComplete">0 - Wait for the associated process to exit. 1 - Wait for the associated process to exit.</param>
            <param name="waitTimeoutSec">Maximum time to wait for process to exit. Set to -1 in case you want to wait indefinitely for the associated process to exit.</param>
            <returns></returns>
        </member>
        <member name="F:TestExecutive.TimeManager.m_timers">
            <summary>
            Key - Timer id.
            Value - Timer start time.
            </summary>
        </member>
        <member name="M:TestExecutive.TimeManager.GetTime(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returnt the current date and time.
            </summary>
            <param name="year">Year component of the date</param>
            <param name="month">Month component of the date</param>
            <param name="day">Day component of the date</param>
            <param name="hour">Hour component of the date</param>
            <param name="minute">Minute component of the date</param>
            <param name="second">Second component of the date</param>
        </member>
        <member name="M:TestExecutive.TimeManager.SetTimer(System.Int32)">
            <summary>
            Start timer with specified id
            </summary>
            <param name="timerId"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.TimeManager.ReadTimer(System.Double@,System.Int32)">
            <summary>
            Return time elapsed time in seconds since timer was set (from SetTimer function).
            </summary>
            <param name="timerId"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Cast.Double2Single(System.Double,System.Single@)">
            <summary>
            Cast double value to single.
            </summary>
            <param name="value"></param>
            <param name="castValue"></param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Cast.SingleDouble(System.Single,System.Double@)">
            <summary>
            Cast float value to double.
            </summary>
            <param name="value"></param>
            <param name="castValue"></param>
            <returns></returns>
        </member>
        <member name="T:TestExecutive.SystemSteps">
            <summary>
            Stroes steps which are built in the OTM
            </summary>
        </member>
        <member name="F:TestExecutive.SystemSteps.m_execution_DB_Locker">
            <summary>
            Locker used for the execution database. 
            </summary>
        </member>
        <member name="F:TestExecutive.SystemSteps.m_testsDB_Locker">
            <summary>
            Locker used for the tests database. 
            </summary>
        </member>
        <member name="M:TestExecutive.SystemSteps.#ctor">
            <summary>
            
            </summary>
            <remarks>
            Ronen issue #1111 - Initialize connection to the testDefintions database. 
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemSteps.ExecutedTestIsAborted">
            <summary>
            Return true if the current execution is still runing and its staus is aborted in the Execution table in the '_TestsExecutions' table.
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1156- Return true only if the test is still running.
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemSteps.GetUUTProperty(System.String,System.String@)">
            <summary>
            Get specific UUT property value (inserted by the user) by its name.(S/N, P/N etc.) 
            This function is should not be used. Use the function under Execution.
            </summary>
            <param name="propertyName">Propert name.</param>
            <param name="propertyValue">Property value</param>
            <returns></returns>
            <remarks>
            Ronen issue #1232 - Get propery of the current execion id as it specified in the OTM database.
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemSteps.MeasurePreviousStepTime(System.Double@,System.Int32,System.Int32)">
            <summary>
            Measure the execuution time of the previous step in seconds.
            </summary>
            <param name="measuredOnlyIfNotError">Indicates that measurements should be done only if previous step completed without error.</param>
            <param name="measureOnlyIfInCriteria">Indicates that measurements should be done only if measurent of previous step is in criteria.</param>
            <param name="prevStepTimeSec">Execution time of the previous step in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.SystemSteps.Wait(System.Double,System.String,System.Boolean)">
            <summary>
            Wait t seconds before continue to the next step.
            </summary>
            <param name="intervalSec">Wait interval in seconds.</param>
            <param name="caption">Caption form</param>
            <param name="showProgressbar">Display progressbar if interval is greater than or equal to 3 seconds</param>
            <returns></returns>
            <remarks>
            Issue #1342
            Issue #1609 - Display progressbar if interval is greater than or equal to 3 seconds
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectUUTPropertyIndexByName">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1111.
            Issue #1439
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectLastOutputByName">
            <summary>
            Select last row of out put variables by its name 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectPropertyFromExecutionsByPropertyIndex(System.String)">
            <summary>
            Select the property of the executed step (Execution with the max execution id).
            </summary>
            <param name="propertyIndex">1 TO 5 respectively to  UUTProperty1-UUTProperty5</param>
            <returns></returns>
            <remarks>
            Ronen issue #1232 - Select property by execution id and not by the max excution id (last). 
                                        We add this mechanism becuase we in case of multiple UUT execution mode we have muliple execution Id for the same execution.             
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectCurrentExecitionIdFromOTMDB">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1232
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectLoginUserFromGenerlInfo">
            <summary>
            Return the login user name from the OTM database.
            </summary>
            <returns></returns>
            <remarks>Ronen issue #1186.</remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.SelectUUTIndexFromGeneralInfo">
            <summary>
             Return the executed UUT index (used in case of simultaneous UUT execution).
            </summary>
            <returns></returns>
            <remarks>
             Ronen issue #1185
            </remarks>
        </member>
        <member name="M:TestExecutive.SystemStepSqlDepot.UpdatePropertyFromExecutionsByPropertyCol(System.String)">
            <summary>
            Set the property value of the  execution.
            </summary>
            <param name="colName">UUTProperty1-UUTProperty5</param>
            <returns></returns>
            <remarks>
            Ronen issue #1233.          
            </remarks>
        </member>
        <member name="T:TestExecutive.Execution">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.Execution.GetActiveUUTInTheOTM">
            <summary>
            Return the name of the UUT which is currently executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Execution.UUTIsAborted(System.Int32,System.Byte@)">
            <summary>
            Check if the specified UUT is aborted
            </summary>
            <param name="uutIndex">UUT to be checked. 1..n</param>
            <param name="aborted">1 - Aboretd; 0 - Not aborted.</param>
        </member>
        <member name="M:TestExecutive.Execution.AbortUUTExecution(System.Int32)">
            <summary>
            Abort execution of the specified UUT
            </summary>
            <param name="uutIndex">Index of UUT to abort. [1..n]</param>
            <remarks>
            #427539963
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.ExcludeUUTExecution(System.Int32)">
            <summary>
            Abort execution of the specified UUT and delete it from UUT list 
            </summary>
            <param name="uutIndex">1..n</param>
            <remarks>
            #701539680
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.SetTestName(System.String)">
            <summary>
            Set name of the current executed test
            </summary>
            <param name="testName"></param>
            <remarks>
            #440125367
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.GetTestIterationCounter(System.Int32@)">
            <summary>
            Return number of iterations the current 'test' or 'sub test' executed (1..n).
            Use this function in case 'Test call' step configured to be repeated.
            </summary>
            <param name="iterationCounter"></param>
        </member>
        <member name="M:TestExecutive.Execution.GetNumberOfUUTs(System.Int32@)">
            <summary>
            Returns the number of UUTs can executed in this UUT as defined in the UUT editor.
            </summary>
            <remarks>
            #489512849
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.UUTIsActive(System.Int32,System.Byte@)">
            <summary>
            Check if the specified UUT was selected in the UUT list. (used in case of simultaneous UUT execution). 1-n
            </summary>
            <param name="uutIndex">UUT to be checked. 1..n</param>
            <param name="active">1 - Active; 0 - Not active.</param>
            <returns></returns>
            <remarks>
            Ronen issue #1220
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.GetUUTIndex(System.Int32@)">
            <summary>
            Return the executed UUT index (used in case of simultaneous UUT execution). 1-n
            </summary>
            <returns></returns>
            <remarks>
            Ronen issue #1185
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.GetUUTVersion(System.String@)">
            <summary>
            Returns the UUT version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:TestExecutive.Execution.GetOutputDetails(System.String,System.String@,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Get detailed results of last out value.
            </summary>ou
            <param name="varName">Var name as it is specified in the DLL. See 'Name' field in the output form</param>
            <param name="caption">Out caption as it defined in the test editor</param>
            <param name="criteria">Output criteria as it specified in the test editor.</param>
            <param name="result">Result value</param>
            <param name="status">Status caption</param>
            <param name="statusCode">0 - Success; 1-Failed; 2-Error</param>
        </member>
        <member name="M:TestExecutive.Execution.GetUUTProperty(System.String,System.String@)">
            <summary>
            Gets specific UUT property value (inserted by the user) by its name.(S/N, P/N etc.) 
            </summary>
            <param name="propertyName">Property name</param>
            <param name="propertyValue">Property value</param>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Execution.SetUUTProperty(System.String,System.String)">
            <summary>
            Sets UUT property value of the current executed UUT.(S/N, P/N etc.) 
            </summary>
            <param name="propertyName">Propert name.</param>
            <param name="propertyValue">Property value.</param>
            <returns></returns>
            <remarks>
            Ronen issue #1233.
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.AbortExecution">
            <summary>
            Abort the execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Execution.GetStepStatus(System.Int32@)">
            <summary>
            Return the previous step status.
            </summary>
            <param name="stepStatus">0-Passed; 1-Failed; 5-Error; 6-NA; 7 - Aborted; 8- Done;11- Done with error</param>
            <remarks>
            #1522
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.GoToTestByName(System.String)">
            <summary>
            Skip to the begining of the first test in the current with the name 'testName'. 
            </summary>
            <param name="testName"></param>
        </member>
        <member name="M:TestExecutive.Execution.DeletTestResultsFromArchiveByName(System.String)">
            <summary>
            Delete results of all executed tests (in the current cycle) with the specified name.
            </summary>
            <param name="testName"></param>
        </member>
        <member name="M:TestExecutive.Execution.GetTestStatusByName(System.String,System.Int32@)">
            <summary>
            Get test status by its name
            </summary>
            <param name="testName">Test name</param>
            <param name="testStatus">0-Passed; 1-Failed; 3-Aborted; 5-Error; 6-NA; 8-Done</param>
            <remarks>
            #1530
            </remarks>
        </member>
        <member name="M:TestExecutive.Execution.AbortTest">
            <summary>
            Abort the execution of the current test (skip to the next test).
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestExecutive.Execution.GetCycleIndex(System.Int32@)">
            <summary>
            Return the current executed cycle index.
            </summary>
            <param name="cycleIndex">The current executed cycle index (1..n)</param>
            <remarks></remarks>
        </member>
        <member name="T:TestExecutive.Threads">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.Threads.AbortThread(System.String)">
            <summary>
            Aborts the thread with the respective id
            </summary>
            <param name="threadId">The ID of the thread returned during the thread creation</param>
        </member>
        <member name="T:TestExecutive.Vars">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestExecutive.Vars.Load(System.String,TestExecutive.Enums.LoadVaraiblesTypes)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <param name="varType"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripLabelText(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripLabel,System.String)">
            <summary>
            Set text of ToolStripLabel
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="text"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripItemText(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripItem,System.String)">
            <summary>
            Set text of ToolStripItem
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="text"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripItemEnable(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripItem,System.Boolean)">
            <summary>
            Set enable value of ToolStripItem
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="text"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripItemBackcolor(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripItem,System.Drawing.Color)">
            <summary>
            Set backcolor of ToolStripItem
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="text"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripLabelVisible(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripLabel,System.Boolean)">
            <summary>
            Set visibility of ToolStripLabel
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="visible"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripToolStripControlHostVisible(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripControlHost,System.Boolean)">
            <summary>
            Set visibily of all the control which are derived from the ToolStripControlHost (ToolStripProgressBar etc.).
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="visible"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripToolStripControlHostEnable(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripControlHost,System.Boolean)">
            <summary>
            Set Enable of all the control which are derived from the ToolStripControlHost (ToolStripProgressBar etc.).
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="visible"></param>
        </member>
        <member name="M:OTools.ThreadCrossingManager.SetToolStripToolStripProgressbarValue(System.Windows.Forms.Form,System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStripProgressBar,System.Int32)">
            <summary>
            Set visibily of all the control which are derived from the ToolStripControlHost (ToolStripProgressBar etc.).
            </summary>
            <param name="frm"></param>
            <param name="ts"></param>
            <param name="ctl"></param>
            <param name="visible"></param>
        </member>
        <member name="T:Utils.Dlg.CFileDlgBase">
            <summary>
            Base class for the file dialogs
            </summary>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.FilePath">
            <summary>
            Gets or sets the file path of the file to open.
            </summary>
            <value>The file path of the file to open.</value>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.DialogSuccess">
            <summary>
            Gets or sets the flag wheter the operation was successful or not.
            </summary>
            <value>The flag wheter the operation was successful or not.</value>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.Filter">
            <summary>
            Gets or sets the filter string for this dialog.
            </summary>
            <value>The filter string for this dialog.</value>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.DefaultExt">
            <summary>
            Gets or sets the default extension of the dialog.
            </summary>
            <value>The default extension of the dialog.</value>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.Title">
            <summary>
            Gets or sets the title of the dialog.
            </summary>
            <value>The title of the dialog.</value>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.InitialDirectory">
            <summary>
            The initial directory for the form
            </summary>
        </member>
        <member name="P:Utils.Dlg.CFileDlgBase.StartupLocation">
            <summary>
            Gets or sets the startup position.
            </summary>
            <value>The startup position.</value>
        </member>
        <member name="M:Utils.Dlg.CFileDlgBase.ShowDialog">
            <summary>
            virtual base method which must be implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:Utils.Dlg.CFileOpenDlgThreadApartmentSafe">
            <summary>
            Simple wrapper class to show the open file dialog by using a STA thread instance in order to prevent exceptions when called from MTA threaded instances
            </summary>
        </member>
        <member name="M:Utils.Dlg.CFileOpenDlgThreadApartmentSafe.ShowDialog">
            <summary>
            uses the open file dialog in an STA thread in order to get rid of the STA/MTA issue with the open file dialog
            </summary>
        </member>
        <member name="T:Utils.Dlg.CFileSaveDlgThreadApartmentSafe">
            <summary>
            Simple wrapper class to show the save file dialog by using a STA thread instance in order to prevent exceptions when called from MTA threaded instances
            </summary>
        </member>
        <member name="M:Utils.Dlg.CFileSaveDlgThreadApartmentSafe.ShowDialog">
            <summary>
            uses the open file dialog in an STA thread in order to get rid of the STA/MTA issue with the open file dialog
            </summary>
        </member>
    </members>
</doc>
